@{
    ViewData["Title"] = "Puestos";
    var IdUsuario = ViewBag.IdUsuario;

}

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Rubik:wght@500&display=swap" rel="stylesheet">

<!-- ================================================================================================= -->
<!-- ======================================== Codigo Principal ======================================= -->
<!-- ================================================================================================= -->
<div class="card d-flex flex-column">
    <div class="card-header d-flex flex-column flex-md-row align-items-center justify-content-center justify-content-md-between">
        <!-- Primera columna: Título -->
        <div class="col-12 col-md-6 d-flex align-items-center justify-content-center justify-content-md-start mb-3 mb-md-0">
            <i class="fa-solid far fa-id-card fa-lg me-2 d-none d-md-block"></i>
            <i class="fa-solid far fa-id-card me-2 mb-2 d-block d-md-none"></i>
            <h3 class="m-0 d-none d-md-block" style="font-family: 'Rubik', sans-serif; font-size: 1.25rem;">Puestos</h3>
            <h6 class="m-0 d-block d-md-none mb-1" style="font-family: 'Rubik', sans-serif; font-size: 1rem;">Puestos</h6>
        </div>

        <!-- Segunda columna: Búsqueda y botones -->
        <div class="col-12 col-md-6 d-flex justify-content-center justify-content-md-end gap-2 mt-2 mt-md-0">
            <!-- Input de búsqueda -->
            <input id="inputBusqueda" class="form-control form-control-sm w-50" type="search" placeholder="Buscar" aria-label="Search">
            <!-- Botón de búsqueda -->
            <button id="btnBuscar" class="btn btn-info btn-sm" type="submit">
                <i class="fas fa-search"></i>
            </button>
            <!-- Botón de recargar -->
            <button type="button" id="btnReloadPuestos" name="btnReloadPuestos" class="btn btn-warning btn-sm">
                <i class="fas fa-sync-alt"></i>
            </button>
            <!-- Botón de agregar cliente -->
            <button type="button" class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#UserModal">
                <i class="fas fa-plus"></i>
            </button>
        </div>
    </div>
    <div class="card-body p-3 flex-grow-1">
        <div class="table-responsive scrollbar h-100">
            <!-- Grilla de clientes -->
            <div id="GridPuestos" style="width: 100%; height: 74vh;"></div>
            <!-- Mensaje de "Cliente no encontrado" -->
            <div id="mensajeNoEncontrado" class="text-danger mt-2" style="display: none;">Puesto no encontrado</div>
        </div>
    </div>
</div>

<!-- ================================================================================================= -->
<!-- ======================================= Modal nuevo cliente ===================================== -->
<!-- ================================================================================================= -->

<div class="modal fade" id="UserModal" tabindex="-1" aria-labelledby="UserModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <form id="FormCrearProyecto">
                <div class="modal-header">
                    <h3 class="modal-title" id="UserModalLabel">Agregar nuevo cliente</h3>
                    <button type="button" class="btn-close cerrarModal" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <!-- Campo: Descripcion -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpDescripcion" name="InpDescripcion" type="text" placeholder="Descripcion" maxlength="50" required autocomplete="off" />
                                <label for="InpDescripcion">Descripcion <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: Tipo -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <select class="form-select" id="InpTipo" name="InpTipo" required>
                                    <option value="">Seleccione una opción</option>
                                    <option value="1">Interno</option>
                                    <option value="2">Externo</option>
                                </select>
                                <label for="InpTipo">Tipo<span class="text-danger">*</span></label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger cerrarModal" data-bs-dismiss="modal">
                        <i class="fas fa-ban me-2"></i>Cancelar
                    </button>
                    <button type="submit" class="btn btn-success px-5" id="BtnAgregarUsuarioExt">
                        <i class="fas fa-user-plus me-2"></i>Agregar Puesto
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- ================================================================================================= -->
<!-- ====================================== Modal editar cliente ===================================== -->
<!-- ================================================================================================= -->

<div class="modal fade" id="ModalEditarPuesto" tabindex="-1" aria-labelledby="ModalEditarPuestoLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <form id="FormEditarPuesto">
                <div class="modal-header">
                    <h5 class="modal-title" id="ModalEditarPuestoLabel">Editar Puesto</h5>
                    <button type="button" class="btn-close cerrarModalEditarPuesto" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="row">
                            <!-- Campo: Descripcion -->
                            <div class="col-12 col-md-6 mb-3">
                                <div class="form-floating">
                                    <input class="form-control" id="InpDescripcionEdit" name="InpDescripcionEdit" type="text" placeholder="Descripcion" maxlength="50" required autocomplete="off" />
                                    <label for="InpDescripcionEdit">Descripcion <span class="text-danger">*</span></label>
                                </div>
                            </div>
                            <!-- Campo: Tipo -->
                            <div class="col-12 col-md-6 mb-3">
                                <div class="form-floating">
                                    <select class="form-select" id="InpTipoEdit" name="InpTipoEdit" required>
                                        <option value="">Seleccione una opción</option>
                                        <option value="1">Interno</option>
                                        <option value="2">Externo</option>
                                    </select>
                                    <label for="InpTipoEdit">Tipo<span class="text-danger">*</span></label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger cerrarModalEditarPuesto">Cancelar</button>
                    <button type="button" class="btn btn-success EditarPuesto" id="btnActualizarPuesto">Actualizar Puesto</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- ================================================================================================= -->
<!-- ====================================== Modal eliminar cliente =================================== -->
<!-- ================================================================================================= -->

<div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="ModalEliminarPuesto" tabindex="-1" aria-labelledby="verticallyCenteredModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form id="FormEliminarPuesto">
                <div class="modal-header">
                    <h5 class="modal-title" id="verticallyCenteredModalLabel">Eliminar Puesto</h5>
                    <button class="btn p-1" type="button" data-bs-dismiss="modal" aria-label="Close">
                        <span class="fas fa-times fs--1"></span>
                    </button>
                </div>
                <div class="modal-body">
                    <p class="text-700 lh-lg mb-0">
                        ¿Deseas eliminar el puesto <strong class="nombrePuesto"></strong>?
                    </p>
                </div>
                <div class="modal-footer">
                    <div class="col-auto">
                        <button class="btn btn-primary me-1 mb-1" type="button" data-bs-dismiss="modal">Cancelar</button>
                    </div>
                    <div class="col-auto">
                        <button class="btn btn-danger me-1 mb-1" type="submit" id="BtnEliminarPuesto">Eliminar</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- ================================================================================================= -->
<!-- ====================================== Modal reactivar cliente ================================== -->
<!-- ================================================================================================= -->

<div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="ModalConfirmarPuesto" tabindex="-1" aria-labelledby="verticallyCenteredModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form id="FormConfirmarPuesto">
                <div class="modal-header">
                    <h5 class="modal-title" id="verticallyCenteredModalLabel">Reactivar Puesto</h5>
                    <button class="btn p-1" type="button" data-bs-dismiss="modal" aria-label="Close">
                        <span class="fas fa-times fs--1"></span>
                    </button>
                </div>
                <div class="modal-body">
                    <p class="text-700 lh-lg mb-0">
                        ¿Deseas reactivar el puesto <strong class="nombreConfirmarPuesto"></strong>?
                    </p>
                </div>
                <div class="modal-footer">
                    <div class="col-auto">
                        <button class="btn btn-primary me-1 mb-1" type="button" data-bs-dismiss="modal">Cancelar</button>
                    </div>
                    <div class="col-auto">
                        <button class="btn btn-success me-1 mb-1" type="submit" id="BtnConfirmarPuesto">Reactivar</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>

        //============================================================================================================================\\
        //====================================================  Variables Globales  ===================================================\\
        //==============================================================================================================================\\
        // Variable global para almacenar la instancia de la grilla de clientes.
        var gridPuestos = null;

        // Función que realiza una solicitud AJAX para obtener los clientes desde el servidor.
        function verPuestos() {
            return new Promise((resolve, reject) => {
                const startTime = performance.now(); // Inicia el contador para medir el tiempo de respuesta.

                $.ajax({
                    type: 'POST', // Método HTTP utilizado para la solicitud.
                    data: {}, // Datos enviados al servidor (en este caso, vacío).
                    url: '@Url.Action("GetPuestos", "Catalogos")',
                    success: function (datos) {
                        const endTime = performance.now(); // Finaliza el contador de tiempo.
                        const serverResponseTime = endTime - startTime; // Calcula el tiempo de respuesta del servidor.
                        gridPuestos.itemsSource = datos.data; // Asigna los datos recibidos a la grilla de clientes.
                        resolve(serverResponseTime); // Resuelve la promesa con el tiempo de respuesta.
                    },
                    error: function () {
                        console.error("Error al obtener los clientes."); // Maneja errores en la solicitud.
                        reject(); // Rechaza la promesa en caso de error.
                    }
                });
            });
        }

        //============================================================================================================================\\
        //================================  Función para editar un Puesto específico basado en su ID  ================================\\
        //==============================================================================================================================\\

        let valoresIniciales = {}; // Almacena los valores iniciales del Puesto
        const camposEdicion = ['#InpDescripcionEdit', '#InpTipoEdit'];

        function EditarPuesto(id) {
            const puesto = gridPuestos.itemsSource.find(c => c.id === id); // Busca el Puesto en la grilla.
            if (puesto) {
                // Guardar los valores iniciales del Puesto
                valoresIniciales = {
                    descripcion: puesto.descripcion || '',
                    tipo: puesto.tipo || ''
                };

                // Asigna los valores del Puesto a los campos del formulario de edición.
                $('#InpDescripcionEdit').val(valoresIniciales.descripcion);
                $('#InpTipoEdit').val(valoresIniciales.tipo); // Aquí se corrigió el error de sintaxis

                // Deshabilitar el botón de actualizar inicialmente
                $('#btnActualizarPuesto').prop('disabled', true);

                // Muestra el modal de edición de Puesto.
                const modalEditarPuesto = new bootstrap.Modal($('#ModalEditarPuesto')[0]);
                modalEditarPuesto.show();
                $('#btnActualizarPuesto').data('id', id); // Asigna el ID del Puesto al botón de actualizar.
            } else {
                console.error("Puesto no encontrado."); // Maneja el caso en que el Puesto no existe.
            }
        }

        // Función para habilitar el botón si algún campo ha cambiado
        function habilitarBotonActualizar() {
            let algunCampoCambiado = false;

            // Comparar los valores actuales con los valores iniciales
            if ($('#InpDescripcionEdit').val() !== valoresIniciales.descripcion ||
                $('#InpTipoEdit').val() !== valoresIniciales.tipo) {
                algunCampoCambiado = true;
            }

            // Habilita el botón si algún campo ha cambiado
            $('#btnActualizarPuesto').prop('disabled', !algunCampoCambiado);
        }

        // Escucha los cambios en los campos del formulario
        camposEdicion.forEach(function (campo) {
            $(campo).on('input change', function () {
                habilitarBotonActualizar();
            });
        });

        // Evento para limpiar el formulario al cerrar el modal
        $('#ModalEditarPuesto').on('hidden.bs.modal', function () {
            $('#FormEditarPuesto')[0].reset(); // Restablece el formulario.
        });

        //============================================================================================================================\\
        //===============================  Inicialización del GRID Clientes y Configuración de Eventos  ===============================\\
        //==============================================================================================================================\\

        $(document).ready(function () {

            //============================================================================================================================\\
            //==========================================               GRID Principal                ======================================\\
            //==============================================================================================================================\\
            // Inicializa la grilla antes de llamar a verPuestos()
            gridPuestos = new wijmo.grid.FlexGrid('#GridPuestos', {
                autoGenerateColumns: false,
                headersVisibility: 'Column',
                itemsSource: [],
                selectionMode: wijmo.grid.SelectionMode.Row,
                columns: [
                    { binding: '', header: '#', width: 50, align: 'center' },
                    { binding: 'descripcion', header: 'Descripcion', width: '*', align: 'center' },
                    { binding: 'tipo', header: 'Tipo', width: '*', align: 'center' },
                    { header: '', isReadOnly: true, width: 80, align: 'center' }
                ],
                isReadOnly: true,
                itemFormatter: function (panel, r, c, cell) {
                    if (panel.cellType === wijmo.grid.CellType.Cell) {
                        const rowData = panel.rows[r].dataItem; // Obtiene los datos de la fila.
                        const flgActivo = rowData.flgActivo; // Verificar el valor de FlgActivo.

                        if (c === 0) {
                            cell.textContent = (r + 1).toString(); // Muestra el número de fila.
                        } else if (c === 2) { // Columna "Tipo"
                            // Mostrar "Interno" o "Externo" según el valor de tipo
                            if (rowData.tipo === "1") {
                                cell.textContent = "Interno";
                            } else if (rowData.tipo === "2") {
                                cell.textContent = "Externo";
                            } else {
                                cell.textContent = rowData.tipo; // Mostrar el valor original si no es 1 ni 2
                            }
                        } else if (c === panel.columns.length - 1) {
                            // Crear los botones según el valor de FlgActivo
                            let botones = '';
                            if (flgActivo === true) {
                                botones = `
                            <div class="d-flex justify-content-center align-items-center gap-2">
                                <button style="height: 25px; width: 25px;" class="btn btn-phoenix-secondary btn-icon fs--2 text-900 abrirModalEditarPuesto" onclick="EditarPuesto(${rowData.id})">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button style="height: 25px; width: 25px;" class="btn btn-phoenix-secondary btn-icon fs--2 text-danger abrirModalEliminarPuesto" data-id="${rowData.id}" data-nombre="${rowData.descripcion}">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>`;
                            } else if (flgActivo === false) {
                                botones = `
                            <div class="d-flex justify-content-center align-items-center gap-2">
                                <button style="height: 25px; width: 25px;" class="btn btn-phoenix-secondary btn-icon fs--2 text-success abrirModalConfirmarPuesto" data-id="${rowData.id}" data-nombre="${rowData.descripcion}">
                                    <i class="fas fa-check"></i>
                                </button>
                            </div>`;
                            }

                            // Insertar los botones en la celda
                            cell.innerHTML = botones;
                        }
                    }
                }
            });

            // Llama a verPuestos() después de inicializar la grilla
            verPuestos();

            //============================================================================================================================\\
            //==========================================  Funcionalidad de Búsqueda y Autocompletar   =====================================\\
            //==============================================================================================================================\\
            $('#inputBusqueda').autocomplete({
                source: function (request, response) {
                    const term = request.term.toLowerCase(); // Obtiene el término de búsqueda.
                    const puestos = gridPuestos.itemsSource; // Obtiene la lista de puestos.
                    const resultados = puestos.filter(puesto =>
                        puesto.descripcion.toLowerCase().includes(term) || // Busca por descripción.
                        puesto.tipo.toLowerCase().includes(term) // Busca por tipo.
                    );
                    response(resultados.map(puesto => ({
                        label: `${puesto.descripcion} (${puesto.tipo})`, // Muestra la descripción y tipo.
                        value: puesto.id // Asigna el ID del puesto como valor.
                    })));
                },
                select: function (event, ui) {
                    const puestoId = ui.item.value; // Obtiene el ID del puesto seleccionado.
                    const puesto = gridPuestos.itemsSource.find(p => p.id === puestoId); // Busca el puesto en la grilla.
                    if (puesto) {
                        gridPuestos.itemsSource = [puesto]; // Filtra la grilla para mostrar solo el puesto seleccionado.
                    }
                }
            });

            // Evento para buscar al hacer clic en el botón de búsqueda.
            $('#btnBuscar').on('click', function () {
                const term = $('#inputBusqueda').val().toLowerCase(); // Obtiene el término de búsqueda.
                const puestos = gridPuestos.itemsSource; // Obtiene la lista de puestos.
                const resultados = puestos.filter(puesto =>
                    puesto.descripcion.toLowerCase().includes(term) || // Busca por descripción.
                    puesto.tipo.toLowerCase().includes(term) // Busca por tipo.
                );

                if (resultados.length > 0) {
                    gridPuestos.itemsSource = resultados; // Filtra la grilla para mostrar los resultados.
                    $('#mensajeNoEncontrado').hide(); // Oculta el mensaje de "Puesto no encontrado".
                } else {
                    gridPuestos.itemsSource = []; // Limpia la grilla si no hay resultados.
                    $('#mensajeNoEncontrado').text('Puesto no encontrado').show(); // Muestra un mensaje de "Puesto no encontrado".
                }
            });

            // Evento para limpiar la búsqueda y mostrar todos los puestos.
            $('#inputBusqueda').on('input', function () {
                if ($(this).val() === '') {
                    verPuestos(); // Recarga todos los puestos.
                    $('#mensajeNoEncontrado').hide(); // Oculta el mensaje de "Puesto no encontrado".
                }
            });

            //============================================================================================================================\\
            //==========================================      Funcionalidad del botón Recargar       ======================================\\
            //==============================================================================================================================\\

            $('#btnReloadPuestos').on('click', function () {
                // Ocultar el grid de clientes
                document.getElementById('GridPuestos').style.visibility = 'hidden';

                // Bloquear el contenido principal con el estilo "arrows"
                Notiflix.Block.arrows('.card', 'Actualizando datos...', {
                    backgroundColor: 'rgba(255, 255, 255, 0.8)', // Fondo semitransparente
                    svgSize: '50px', // Tamaño del ícono de flechas
                    messageFontSize: '16px', // Tamaño del mensaje
                });

                // Llamar a la función verPuestos para recargar el grid
                verPuestos().then((serverResponseTime) => {
                    // Tiempo adicional de 500 ms después de la respuesta del servidor
                    setTimeout(() => {
                        // Desbloquear el contenido principal
                        Notiflix.Block.remove('.card');

                        // Mostrar el grid después de que termine la animación de éxito
                        document.getElementById('GridPuestos').style.visibility = 'visible';
                    }, serverResponseTime + 500); // Tiempo del servidor + 500 ms
                }).catch(() => {
                    // En caso de error, desbloquear el contenido principal
                    Notiflix.Block.remove('.card');

                    // Mostrar un mensaje de error con SweetAlert2 (puedes cambiarlo por Notiflix si prefieres)
                    Swal.fire({
                        title: 'Error',
                        text: 'Hubo un error al recargar los puestos.',
                        icon: 'error',
                        timer: 2000,
                        timerProgressBar: true,
                        showConfirmButton: false,
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        allowEnterKey: false
                    });

                    // Mostrar el grid incluso si hay un error
                    document.getElementById('GridPuestos').style.visibility = 'visible';
                });
            });

            //============================================================================================================================\\
            //========================================== Funcionalidad del boton de Agregar Puesto  =======================================\\
            //==============================================================================================================================\\

            // Validación del formulario
            $("#FormCrearProyecto").validate({
                rules: {
                    InpDescripcion: { required: true, minlength: 2 },
                    InpTipo: { required: true, },
                },
                messages: {
                    InpDescripcion: { required: "La Descripción es requerida.", minlength: "Mínimo 2 caracteres." },
                    InpTipo: { required: "El Tipo es requerido." },
                },
                submitHandler: function (form, event) {
                    event.preventDefault();
                    agregarPuesto(); // Llamar a la función sin pasar IdUsuario
                },
                errorPlacement: function (error, element) {
                    error.addClass('col-12 mt-2 bg-danger text-white text-center p-2 rounded');
                    error.insertAfter(element);
                },
                errorElement: 'div',
                errorClass: 'alert-validate'
            });

            // Evento para limpiar el formulario al cerrar el modal
            $('#UserModal').on('hidden.bs.modal', function () {
                $('#FormCrearProyecto')[0].reset(); // Restablece el formulario.
                $('#FormCrearProyecto').validate().resetForm();
            });

            // Función para enviar los datos del formulario mediante AJAX
            function agregarPuesto() {
                var formData = new FormData();
                formData.append('Descripcion', $('#InpDescripcion').val());
                formData.append('Tipo', $('#InpTipo').val());

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("AgregarPuesto", "Catalogos")',
                    data: formData,
                    processData: false,
                    contentType: false,
                    beforeSend: function () {
                        // Ocultar el grid de clientes
                        document.getElementById('GridPuestos').style.visibility = 'hidden';

                        // Bloquear el contenido principal con el estilo "hourglass"
                        Notiflix.Block.circle('.card', 'Agregando cliente...', {
                            backgroundColor: 'rgba(255, 255, 255, 0.8)', // Fondo semitransparente
                            svgSize: '50px', // Tamaño del ícono de reloj de arena
                            messageFontSize: '16px', // Tamaño del mensaje
                        });
                    },
                    success: function (response) {
                        if (response.resultado) {

                            // Llamar a la función verPuestos para recargar el grid
                            verPuestos().then((serverResponseTime) => {
                                // Tiempo adicional de 500 ms después de la respuesta del servidor
                                setTimeout(() => {
                                    // Desbloquear el contenido principal
                                    Notiflix.Block.remove('.card');

                                    // Mostrar el grid después de que termine la animación de éxito
                                    document.getElementById('GridPuestos').style.visibility = 'visible';
                                }, serverResponseTime + 500); // Tiempo del servidor + 500 ms
                            }).catch(() => {
                                // En caso de error, desbloquear el contenido principal
                                Notiflix.Block.remove('.card');

                                // Mostrar un mensaje de error con SweetAlert2
                                Swal.fire({
                                    title: 'Error',
                                    text: 'Hubo un error al recargar los puestos.',
                                    icon: 'error',
                                    timer: 2000,
                                    timerProgressBar: true,
                                    showConfirmButton: false,
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    allowEnterKey: false
                                });

                                // Mostrar el grid incluso si hay un error
                                document.getElementById('GridPuestos').style.visibility = 'visible';
                            });
                        } else {
                            // Desbloquear el contenido principal si hay un error en la respuesta
                            Notiflix.Block.remove('.card');

                            // Mostrar un mensaje de error con SweetAlert2
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: response.mensaje
                            });
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // Desbloquear el contenido principal en caso de error en la solicitud
                        Notiflix.Block.remove('.card');

                        // Mostrar un mensaje de error con SweetAlert2
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "Ocurrió un error al agregar el cliente."
                        });

                        console.error("Error en la solicitud:", textStatus, errorThrown);
                    },
                    complete: function () {
                        // Desbloquear el contenido principal después de 500 ms adicionales
                        setTimeout(() => {
                            Notiflix.Block.remove('.card');
                        }, 500);
                    }
                });

                const UserModal = bootstrap.Modal.getInstance(document.getElementById('UserModal'));
                UserModal.hide();
            }

            //============================================================================================================================\\
            //==========================================   Funcionalidad del botón Editar Cliente    ======================================\\
            //==============================================================================================================================\\

            $('.cerrarModalEditarPuesto').on('click', function () {
                const modalEditarPuesto = bootstrap.Modal.getInstance(document.getElementById('ModalEditarPuesto'));
                modalEditarPuesto.hide();
            });

            $("#InpTelefonoEdit").on("input", function () {
                $(this).val($(this).val().replace(/[^0-9+ ]/g, ""));
            });

            // Validación del formulario
            $("#FormEditarPuesto").validate({
                rules: {
                    InpDescripcionEdit: { required: true, minlength: 2 },
                    InpTipoEdit: { required: true },
                },
                messages: {
                    InpDescripcionEdit: { required: "La descripción es requerida.", minlength: "Mínimo 2 caracteres." },
                    InpTipoEdit: { required: "El tipo es requerido." },
                },
                submitHandler: function (form, event) {
                    event.preventDefault();
                    agregarPuesto(); // Llamar a la función sin pasar IdUsuario
                },
                errorPlacement: function (error, element) {
                    error.addClass('col-12 mt-2 bg-danger text-white text-center p-2 rounded');
                    error.insertAfter(element);
                },
                errorElement: 'div',
                errorClass: 'alert-validate'
            });

            // Selecciona todos los campos del formulario de edición
            const camposEdicion = ['#InpDescripcionEdit', '#InpTipoEdit'];

            // Función para habilitar el botón si algún campo ha cambiado
            function habilitarBotonActualizar() {
                let algunCampoCambiado = false;

                camposEdicion.forEach(function (campo) {
                    if ($(campo).val() !== '') {
                        algunCampoCambiado = true;
                    }
                });

                // Habilita el botón si algún campo ha cambiado
                if (algunCampoCambiado) {
                    $('#btnActualizarPuesto').prop('disabled', false);
                } else {
                    $('#btnActualizarPuesto').prop('disabled', true);
                }
            }

            // Escucha los cambios en los campos del formulario
            camposEdicion.forEach(function (campo) {
                $(campo).on('input change', function () {
                    habilitarBotonActualizar();
                });
            });

            $('#btnActualizarPuesto').on('click', function () {
                const id = $(this).data('id'); // Obtiene el ID del puesto.
                const descripcion = $('#InpDescripcionEdit').val(); // Obtiene la descripción.
                const tipo = $('#InpTipoEdit').val(); // Obtiene el tipo.

                const formData = new FormData();
                formData.append('Id', id);
                formData.append('Descripcion', descripcion);
                formData.append('Tipo', tipo);

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("EditarPuesto", "Catalogos")', // Asegúrate de que esta ruta sea correcta.
                    data: formData,
                    processData: false,
                    contentType: false,
                    beforeSend: function () {
                        // Ocultar el grid de puestos
                        document.getElementById('GridPuestos').style.visibility = 'hidden';

                        // Bloquear el contenido principal con el estilo "hourglass"
                        Notiflix.Block.hourglass('.card', 'Actualizando datos...', {
                            backgroundColor: 'rgba(255, 255, 255, 0.8)', // Fondo semitransparente
                            svgSize: '50px', // Tamaño del ícono de reloj de arena
                            messageFontSize: '16px', // Tamaño del mensaje
                        });
                    },
                    success: function (response) {
                        if (response.resultado) {
                            // Llamar a la función verPuestos para recargar el grid
                            verPuestos().then((serverResponseTime) => {
                                // Tiempo adicional de 500 ms después de la respuesta del servidor
                                setTimeout(() => {
                                    // Desbloquear el contenido principal
                                    Notiflix.Block.remove('.card');

                                    // Mostrar el grid después de que termine la animación de éxito
                                    document.getElementById('GridPuestos').style.visibility = 'visible';
                                }, serverResponseTime + 500); // Tiempo del servidor + 500 ms
                            }).catch(() => {
                                // En caso de error, desbloquear el contenido principal
                                Notiflix.Block.remove('.card');

                                // Mostrar un mensaje de error con SweetAlert2
                                Swal.fire({
                                    title: 'Error',
                                    text: 'Hubo un error al recargar los puestos.',
                                    icon: 'error',
                                    timer: 2000,
                                    timerProgressBar: true,
                                    showConfirmButton: false,
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    allowEnterKey: false
                                });

                                // Mostrar el grid incluso si hay un error
                                document.getElementById('GridPuestos').style.visibility = 'visible';
                            });
                        } else {
                            // Desbloquear el contenido principal si hay un error en la respuesta
                            Notiflix.Block.remove('.card');

                            // Mostrar un mensaje de error con SweetAlert2
                            Swal.fire({ icon: "error", title: "Error", text: response.mensaje });
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // Desbloquear el contenido principal en caso de error en la solicitud
                        Notiflix.Block.remove('.card');

                        // Mostrar un mensaje de error con SweetAlert2
                        Swal.fire({
                            title: 'Error',
                            text: 'Hubo un error en la solicitud al servidor.',
                            icon: 'error',
                            timer: 2000,
                            timerProgressBar: true,
                            showConfirmButton: false,
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            allowEnterKey: false
                        });

                        console.error("Error en la solicitud:", textStatus, errorThrown);
                    },
                    complete: function () {
                        // Desbloquear el contenido principal después de 500 ms adicionales
                        setTimeout(() => {
                            Notiflix.Block.remove('.card');
                        }, 500);
                    }
                });

                const modalEditarPuesto = bootstrap.Modal.getInstance(document.getElementById('ModalEditarPuesto'));
                modalEditarPuesto.hide(); // Cierra el modal.
            });

            // Evento para limpiar el formulario al cerrar el modal
            $('#ModalEditarPuesto').on('hidden.bs.modal', function () {
                $('#FormEditarPuesto')[0].reset(); // Restablece el formulario.
                $('#FormEditarPuesto').validate().resetForm();
            });

            //============================================================================================================================\\
            //==========================================   Funcionalidad del botón Eliminar Cliente  ======================================\\
            //==============================================================================================================================\\
            // Función para abrir el modal de eliminación de puesto.
            function EliminarPuesto(id, descripcion) {
                $(".nombrePuesto").text(descripcion); // Muestra la descripción del puesto en el modal.
                $("#BtnEliminarPuesto").data("id", id); // Asigna el ID al botón de eliminar.
                const modalEliminar = new bootstrap.Modal(document.getElementById("ModalEliminarPuesto"));
                modalEliminar.show(); // Muestra el modal.
            }

            // Evento para abrir el modal de eliminación.
            $(document).on("click", ".abrirModalEliminarPuesto", function () {
                let id = $(this).data("id"); // Extrae el ID del puesto usando un atributo data-*.
                let descripcion = $(this).data("nombre"); // Obtiene la descripción.
                EliminarPuesto(id, descripcion); // Llama a la función para abrir el modal.
            });

            // Evento para cerrar el modal de eliminación.
            $(".cerrarModalEliminarPuesto").on("click", function () {
                const modalEliminar = bootstrap.Modal.getInstance(document.getElementById("ModalEliminarPuesto"));
                modalEliminar.hide(); // Cierra el modal.
            });

            // Evento para manejar la eliminación del puesto.
            $("#FormEliminarPuesto").on("submit", function (e) {
                e.preventDefault(); // Prevenir el envío del formulario por defecto.

                const id = $("#BtnEliminarPuesto").data("id"); // Obtiene el ID del puesto.
                console.log("Eliminando puesto con ID:", id); // Registra el ID en consola.

                const formData = new FormData();
                formData.append('Id', id);

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("DesactivarPuesto", "Catalogos")', // Asegúrate de que la ruta sea correcta.
                    data: formData,
                    contentType: false, // Importante para FormData
                    processData: false, // Importante para FormData
                    beforeSend: function () {
                        // Ocultar el grid de puestos
                        document.getElementById('GridPuestos').style.visibility = 'hidden';

                        // Bloquear el contenido principal con el estilo "hourglass"
                        Notiflix.Block.hourglass('.card', 'Actualizando datos...', {
                            backgroundColor: 'rgba(255, 255, 255, 0.8)', // Fondo semitransparente
                            svgSize: '50px', // Tamaño del ícono de reloj de arena
                            messageFontSize: '16px', // Tamaño del mensaje
                        });
                    },
                    success: function (response) {
                        if (response.resultado) {
                            // Llamar a la función verPuestos para recargar el grid
                            verPuestos().then((serverResponseTime) => {
                                // Tiempo adicional de 500 ms después de la respuesta del servidor
                                setTimeout(() => {
                                    // Desbloquear el contenido principal
                                    Notiflix.Block.remove('.card');

                                    // Mostrar el grid después de que termine la animación de éxito
                                    document.getElementById('GridPuestos').style.visibility = 'visible';
                                }, serverResponseTime + 500); // Tiempo del servidor + 500 ms
                            }).catch(() => {
                                // En caso de error, desbloquear el contenido principal
                                Notiflix.Block.remove('.card');

                                // Mostrar un mensaje de error con SweetAlert2
                                Swal.fire({
                                    title: 'Error',
                                    text: 'Hubo un error al recargar los puestos.',
                                    icon: 'error',
                                    timer: 2000,
                                    timerProgressBar: true,
                                    showConfirmButton: false,
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    allowEnterKey: false
                                });

                                // Mostrar el grid incluso si hay un error
                                document.getElementById('GridPuestos').style.visibility = 'visible';
                            });
                        } else {
                            // Desbloquear el contenido principal si hay un error en la respuesta
                            Notiflix.Block.remove('.card');

                            // Mostrar un mensaje de error con SweetAlert2
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: response.mensaje
                            });
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // Desbloquear el contenido principal en caso de error en la solicitud
                        Notiflix.Block.remove('.card');

                        // Mostrar un mensaje de error con SweetAlert2
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "Ocurrió un error al desactivar el puesto."
                        });

                        console.error("Error en la solicitud:", textStatus, errorThrown);
                    },
                    complete: function () {
                        // Desbloquear el contenido principal después de 500 ms adicionales
                        setTimeout(() => {
                            Notiflix.Block.remove('.card');
                        }, 500);
                    }
                });

                // Cierra el modal después de iniciar la solicitud AJAX
                const modalEliminar = bootstrap.Modal.getInstance(document.getElementById('ModalEliminarPuesto'));
                modalEliminar.hide();
            });

            //============================================================================================================================\\
            //==========================================  Funcionalidad del botón Reactivar Cliente  ======================================\\
            //==============================================================================================================================\\
            // Función para abrir el modal de confirmación de reactivación de cliente.
            function ConfirmarPuesto(id, descripcion) {
                $(".nombreConfirmarPuesto").text(descripcion); // Muestra la descripción del puesto en el modal.
                $("#BtnConfirmarPuesto").data("id", id); // Asigna el ID del puesto al botón de confirmación.
                const modalConfirmar = new bootstrap.Modal(document.getElementById("ModalConfirmarPuesto"));
                modalConfirmar.show(); // Muestra el modal de confirmación.
            }

            // Evento para abrir el modal de confirmación al hacer clic en un botón específico.
            $(document).on("click", ".abrirModalConfirmarPuesto", function () {
                let id = $(this).data("id"); // Obtiene el ID del puesto desde el atributo data-id.
                let descripcion = $(this).data("nombre"); // Obtiene la descripción del puesto desde el atributo data-descripcion.
                ConfirmarPuesto(id, descripcion); // Llama a la función para abrir el modal de confirmación.
            });

            // Evento para cerrar el modal de confirmación al hacer clic en un botón de cierre.
            $(".cerrarModalConfirmarPuesto").on("click", function () {
                const modalConfirmar = bootstrap.Modal.getInstance(document.getElementById("ModalConfirmarPuesto"));
                modalConfirmar.hide(); // Cierra el modal de confirmación.
            });

            // Evento para manejar el envío del formulario de confirmación de reactivación de puesto.
            $("#FormConfirmarPuesto").on("submit", function (e) {
                e.preventDefault(); // Evita el envío tradicional del formulario.

                const id = $("#BtnConfirmarPuesto").data("id"); // Obtiene el ID del puesto desde el botón de confirmación.
                console.log("Reactivando puesto con ID:", id); // Muestra el ID del puesto en la consola para depuración.

                const formData = new FormData();
                formData.append('Id', id); // Agrega el ID del puesto al FormData.

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("ReactivarPuesto", "Catalogos")', // URL de la acción que reactiva al puesto.
                    data: formData,
                    contentType: false, // Importante para FormData.
                    processData: false, // Importante para FormData.
                    beforeSend: function () {
                        // Ocultar el grid de puestos
                        document.getElementById('GridPuestos').style.visibility = 'hidden';

                        // Bloquear el contenido principal con el estilo "hourglass"
                        Notiflix.Block.hourglass('.card', 'Actualizando datos...', {
                            backgroundColor: 'rgba(255, 255, 255, 0.8)', // Fondo semitransparente
                            svgSize: '50px', // Tamaño del ícono de reloj de arena
                            messageFontSize: '16px', // Tamaño del mensaje
                        });
                    },
                    success: function (response) {
                        if (response.resultado) {
                            // Llamar a la función verPuestos para recargar el grid
                            verPuestos().then((serverResponseTime) => {
                                // Tiempo adicional de 500 ms después de la respuesta del servidor
                                setTimeout(() => {
                                    // Desbloquear el contenido principal
                                    Notiflix.Block.remove('.card');

                                    // Mostrar el grid después de que termine la animación de éxito
                                    document.getElementById('GridPuestos').style.visibility = 'visible';
                                }, serverResponseTime + 500); // Tiempo del servidor + 500 ms
                            }).catch(() => {
                                // En caso de error, desbloquear el contenido principal
                                Notiflix.Block.remove('.card');

                                // Mostrar un mensaje de error con SweetAlert2
                                Swal.fire({
                                    title: 'Error',
                                    text: 'Hubo un error al recargar los puestos.',
                                    icon: 'error',
                                    timer: 2000,
                                    timerProgressBar: true,
                                    showConfirmButton: false,
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    allowEnterKey: false
                                });

                                // Mostrar el grid incluso si hay un error
                                document.getElementById('GridPuestos').style.visibility = 'visible';
                            });
                        } else {
                            // Desbloquear el contenido principal si hay un error en la respuesta
                            Notiflix.Block.remove('.card');

                            // Mostrar un mensaje de error con SweetAlert2
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: response.mensaje
                            });
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // Desbloquear el contenido principal en caso de error en la solicitud
                        Notiflix.Block.remove('.card');

                        // Mostrar un mensaje de error con SweetAlert2
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "Ocurrió un error al reactivar el puesto."
                        });

                        console.error("Error en la solicitud:", textStatus, errorThrown);
                    },
                    complete: function () {
                        // Desbloquear el contenido principal después de 500 ms adicionales
                        setTimeout(() => {
                            Notiflix.Block.remove('.card');
                        }, 500);
                    }
                });

                // Cierra el modal de confirmación después de iniciar la solicitud AJAX.
                const modalConfirmar = bootstrap.Modal.getInstance(document.getElementById('ModalConfirmarPuesto'));
                modalConfirmar.hide();
            });
        });

    </script>
}