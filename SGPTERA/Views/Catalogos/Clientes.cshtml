@{
    ViewData["Title"] = "Inicio";
    var IdUsuario = ViewBag.IdUsuario;

}


<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Rubik:wght@500&display=swap" rel="stylesheet">

<div class="card d-flex flex-column">
    <div class="card-header d-flex flex-column flex-md-row align-items-center justify-content-center justify-content-md-between">
        <!-- Primera columna: Ocupa col-12 en pantallas pequeñas y col-6 en pantallas grandes -->
        <div class="col-12 col-md-6 d-flex align-items-center justify-content-center justify-content-md-start mb-3 mb-md-0">
            <!-- Icono visible solo en pantallas grandes (md y superiores) -->
            <i class="fa-solid fa-users fa-lg me-2 d-none d-md-block"></i>
            <!-- Icono visible solo en pantallas pequeñas (menores a md) -->
            <i class="fa-solid fa-users me-2 mb-2 d-block d-md-none"></i>
            <!-- Título visible solo en pantallas grandes (md y superiores) -->
            <h3 class="m-0 d-none d-md-block" style="font-family: 'Rubik', sans-serif; font-size: 1.25rem;">Clientes</h3>
            <!-- Título visible solo en pantallas pequeñas (menores a md) -->
            <h6 class="m-0 d-block d-md-none mb-1" style="font-family: 'Rubik', sans-serif; font-size: 1rem;">Clientes</h6>
        </div>

        <!-- Segunda columna: Ocupa col-12 en pantallas pequeñas y col-6 en pantallas grandes -->
        <div class="col-12 col-md-6 d-flex justify-content-center justify-content-md-end gap-2 mt-2 mt-md-0">
            <!-- Input de búsqueda -->
            <input class="form-control form-control-sm w-auto" type="search" placeholder="Buscar" aria-label="Search">
            <!-- Botones -->
            <button class="btn btn-info btn-sm" type="submit">
                <i class="fas fa-search"></i>
            </button>
            <button type="button" id="btnReloadClientes" name="btnReloadClientes" class="btn btn-warning btn-sm">
                <i class="fas fa-sync-alt"></i>
            </button>
            <button type="button" class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#UserModal">
                <i class="fas fa-plus"></i>
            </button>
        </div>
    </div>
    <div class="card-body p-3 flex-grow-1">
        <div class="table-responsive scrollbar h-100">
            <div id="GridClientes"></div>
            <div class="ContClientes"></div>
        </div>
    </div>
</div>

<!-- Modal para agregar un nuevo cliente -->
<div class="modal fade" id="UserModal" tabindex="-1" aria-labelledby="UserModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-md modal-dialog-scrollable modal-dialog-centered">
        <div class="modal-content overflow-hidden">
            <div class="modal-header">
                <h3 class="modal-title" id="UserModalLabel">Agregar nuevo cliente</h3>
                <button type="button" class="btn-close cerrarModal" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body p-3 px-md-3" style="overflow-y: auto; scrollbar-width: none;">
                <form id="FormCrearProyecto" class="row g-3 mb-2">
                    <!-- Campo: Razón Social -->
                    <div class="col-sm-6 col-md-4">
                        <div class="form-floating">
                            <input class="form-control" id="InpRazonSocial" type="text" placeholder="Razón Social" required />
                            <label for="InpRazonSocial">Razón Social</label>
                        </div>
                    </div>
                    <!-- Campo: RFC -->
                    <div class="col-sm-6 col-md-4">
                        <div class="form-floating">
                            <input class="form-control" id="InpRFC" type="text" placeholder="RFC" required />
                            <label for="InpRFC">RFC</label>
                        </div>
                    </div>
                    <!-- Campo: Prefijo -->
                    <div class="col-sm-6 col-md-4">
                        <div class="form-floating">
                            <input class="form-control" id="InpPrefijo" type="text" placeholder="Prefijo" />
                            <label for="InpPrefijo">Prefijo</label>
                        </div>
                    </div>
                    <!-- Campo: Imagen -->
                    <div class="col-sm-12 mt-4">
                        <label class="fw-bold mb-2" style="font-size: 1rem;">Imagen para el usuario:</label>
                        <input class="form-control" id="InpImagenExt" name="imagen" type="file" accept="image/*" />
                    </div>
                    <!-- Previsualización de la imagen -->
                    <div class="col-12 mt-3">
                        <div id="previewContainer" class="d-none border rounded p-3 d-flex align-items-center justify-content-between" style="width: 100%;">
                            <div class="d-flex align-items-center">
                                <!-- Imagen con tamaño dinámico -->
                                <img id="previewImage" src="" alt="Previsualización" class="img-thumbnail me-3" style="max-width: 150px; max-height: 150px; object-fit: contain;">
                                <div>
                                    <p id="fileName" class="mb-0 fw-bold"></p>
                                    <small id="fileSize" class="text-muted"></small>
                                </div>
                            </div>
                            <button type="button" class="btn btn-link text-danger p-0" id="removePreview" aria-label="Eliminar previsualización">
                                <i class="fas fa-trash-alt"></i> <!-- Ícono de Font Awesome -->
                            </button>
                        </div>
                    </div>
                    <!-- Contenedor para alertas -->
                    <div class="col-md-12 gy-3 ContAlerta"></div>
                </form>
            </div>
            <div class="modal-footer">
                <!-- Botón Cancelar con nuevo ícono -->
                <button type="button" class="btn btn-danger cerrarModal" data-bs-dismiss="modal">
                    <i class="fas fa-ban me-2"></i>Cancelar <!-- Ícono de Font Awesome -->
                </button>
                <!-- Botón Agregar Usuario con icono -->
                <button type="button" class="btn btn-success px-5" id="BtnAgregarUsuarioExt">
                    <i class="fas fa-user-plus me-2"></i>Agregar cliente
                </button>
            </div>
        </div>
    </div>
</div>


<!--div-modal que se despliega al presionar el boton de eliminar proyecto-->
<div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="ModalEliminarUsuarioExterno" tabindex="-1" aria-labelledby="verticallyCenteredModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="verticallyCenteredModalLabel" style="color: red;">Eliminar</h5>
                <button class="btn p-1 cerrarModalEliminarUsuarioExt" type="button" aria-label="Close"><span class="fas fa-times fs--1"></span></button>
            </div>
            <div class="modal-body">
                <p class="text-700 lh-lg mb-0">Estas seguro de que deseas eliminar al Usuario <strong class="nombreUsuario"></strong> esta acccion es irreversible. </p>
            </div>
            <div class="modal-footer">
                <div class="col-auto">
                    <button class="btn btn-outline-primary me-1 mb-1 cerrarModalEliminarUsuarioExt">Cancelar</button>
                </div>
                <div class="col-auto">
                    <button class="btn btn-outline-danger me-1 mb-1 BtnEliminarUsuarioExterno" id="BtnEliminarUsuarioExterno" data-id="${rowData.id}">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
</div>


<!--div-modal que se despliega al presionar el boton de info-->
<div class="modal fade" id="ModalInfoUsuarioExt" tabindex="-1" aria-labelledby="ModalInfoUsuarioExt" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
        <div class="modal-content overflow-hidden">
            <div class="modal-header position-relative p-0 d-flex">
                <button class="btn btn-circle project-modal-btn position-absolute end-0 top-0 mt-3 me-3 bg-white cerrarModalInfoUsuarioExt">
                    <span class="fa-solid fa-xmark text-900"></span>
                </button>
                <img class="w-100 imagenEmpresa" src="" alt="" style="max-height: 200px; min-height: 150px;" />
                <div class="position-absolute ms-5 mt-11">
                    <div class="avatar avatar-l">
                        <img class="rounded-circle imagenPerfil" src="" alt="Avatar del usuario" style="width: 65px; height: 65px; background-color: white; border: 2px solid black">
                    </div>
                </div>
                <div class="position-absolute mt-14 ms-14 ">
                    <span class="badge bg-success Activo"></span>
                </div>
            </div>
            <div class="modal-body p-2 px-md-6">
                <div class="g-5">
                    <div class="col-12 col-md-12">
                        <div class="mb-4">
                            <h3 class="fw-bolder lh-sm nombreCompletoUsuarioInt"></h3>
                        </div>
                        <div class="col-12">
                            <div class="row">
                                <div class=" col-6 mb-3">
                                    <h5 class="text-800 mb-2">Nombre de usuario</h5>
                                    <p class="nombreUsuarioExt"></p>
                                </div>
                                <div class="col-6 mb-3">
                                    <h5 class="text-800 mb-2">Puesto</h5>
                                    <p class="puestoUsuarioExt"></p>
                                </div>
                                <div class="col-6 mb-3">
                                    <h5 class="text-800 mb-2">Empresa</h5>
                                    <p class="empresaUsuarioExt"></p>
                                </div>
                                <div class="col-6 mb-3">
                                    <h5 class="text-800 mb-2">Email</h5>
                                    <p class="emailUsuarioExt"></p>
                                </div>
                                <div class="col-6 mb-3">
                                    <h5 class="text-800 mb-2">Teléfono</h5>
                                    <p class="telefonoUsuarioExt"></p>
                                </div>
                                <div class="col-6">
                                    <h5 class="text-800">Fecha de ingreso</h5>
                                    <p class="fechaIngresoUsuarioExt"></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<!--div-modal que se despliega al presionar el boton de editar usuario-->
<div class="modal fade" id="ModalEditarUsuarioExterno" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="ModalEditarUsuarioExternoLabel" aria-hidden="true">
    <div class="modal-dialog modal-md modal-dialog-scrollable modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ModalEditarUsuarioExternoLabel">Editar Usuario</h5>
                <button type="button" class="btn-close cerrarModalEditarUsuarioExt" aria-label="Close"></button>
            </div>
            <div class="modal-body" style=" overflow-y: auto; scrollbar-width: none;">
                <form class="row g-3">
                    <div class="col-md-4">
                        <div class="form-floating">
                            <input class="form-control" id="InpNombresExternoEdit" type="text" placeholder="Nombres" value="${rowData.nombre}" />
                            <label for="InpNombresExternoEdit">Nombres *</label>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-floating">
                            <input class="form-control" id="InpApellidoPaternoExternoEdit" type="text" placeholder="Apellido Paterno" value="${rowData.apellidoPaterno}" />
                            <label for="InpApellidoPaternoExternoEdit">Apellido Paterno *</label>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-floating">
                            <input class="form-control" id="InpApellidoMaternoExternoEdit" type="text" placeholder="Apellido Materno" />
                            <label for="InpApellidoMaternoExternoEdit">Apellido Materno</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input class="form-control" id="InpNombreUsuarioExternoEdit" type="text" placeholder="Nombre de Usuario" value="${rowData.nombreUsuario}" />
                            <label for="InpNombreUsuarioExternoEdit">Nombre de Usuario *</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input class="form-control" id="InpEmailExternoEdit" type="email" placeholder="Email" value="${rowData.email}" />
                            <label for="InpEmailExternoEdit">Email *</label>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="form-floating">
                            <input class="form-control" id="InpTelefonoExternoEdit" type="number" placeholder="Teléfono" value="${rowData.telefono}" oninput="validarEntero(this)" />
                            <label for="InpTelefonoExternoEdit">Teléfono</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <input id="InpAutoCompleteEdit" type="text" class="form-control p-2" placeholder="AutoComplete" style="height: 47px;" />
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input class="form-control" id="InpPuestoExternoEdit" type="text" placeholder="Puesto" value="${rowData.puesto}" />
                            <label for="InpPuestoExternoEdit">Puesto *</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input class="form-control" id="InpContrasenaExternoEdit" type="password" placeholder="Contraseña" />
                            <label for="InpContrasenaExternoEdit">Contraseña *</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input class="form-control" id="InpConfirmarContrasenaExternoEdit" type="password" placeholder="Confirmar Contraseña" />
                            <label for="InpConfirmarContrasenaExternoEdit">Confirmar Contraseña *</label>
                        </div>
                    </div>
                    <div class="col-12">
                        <label class="form-label fw-bold mt-2" style="font-size: 14px; color: black;">Imagen para el usuario:</label>
                        <input class="form-control" id="InpUsuarioExtImagenEdit" name="imagen" type="file" accept="image/*" />
                    </div>
                    <div class="container mt-2">
                        <div id="previewContainer2" class=" border rounded p-3 d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center">
                                <img id="previewImage2" src="" alt="Previsualización" class="img-thumbnail me-3 previewImage" style="width: 50px; height: 50px; ">
                                <div>
                                    <p id="fileName2" class="mb-0 fw-bold fileName2"></p>
                                    <small id="fileSize2" class="text-muted fileSize2"></small>
                                </div>
                            </div>
                            <button type="button" class="btn btn-link text-danger p-0" id="removePreview2">
                                <i class="btn-close"></i> <!-- Icono de Bootstrap -->
                            </button>
                        </div>
                    </div>
                    <div id="ContAlerta" class="col-12"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-danger cerrarModalEditarUsuarioExt">Cancelar</button>
                <button type="button" class="btn btn-outline-success EditarUsuarioExterno" data-id="${rowData.id}">Actualizar Usuario</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>

        // Variable global para almacenar la instancia de la grilla de clientes.
        var gridClientes = null;

        // URL para obtener los clientes desde el servidor, generada dinámicamente usando Razor.
        const urlGetClientes = '@Url.Action("GetClientes", "GestionProyectos")';

        // Función que realiza una solicitud AJAX para obtener los clientes desde el servidor.
        function verClientes() {
            return new Promise((resolve, reject) => {
                // Registra el tiempo inicial para medir el tiempo de respuesta del servidor.
                const startTime = performance.now();

                // Realiza una solicitud AJAX de tipo POST.
                $.ajax({
                    type: 'POST',
                    data: {}, // No se envían datos adicionales en este caso.
                    url: urlGetClientes, // URL de la acción que obtiene los clientes.
                    success: function (datos) {
                        // Registra el tiempo final y calcula el tiempo de respuesta del servidor.
                        const endTime = performance.now();
                        const serverResponseTime = endTime - startTime;

                        // Asigna los datos obtenidos a la grilla de clientes.
                        gridClientes.itemsSource = datos.data;

                        // Resuelve la promesa con el tiempo de respuesta del servidor.
                        resolve(serverResponseTime);
                    },
                    error: function () {
                        // En caso de error, se registra en la consola y se rechaza la promesa.
                        console.error("Error al obtener los clientes.");
                        reject();
                    }
                });
            });
        }

        // Cuando el documento está listo, se ejecuta este código.
        $(document).ready(function () {
            // Inicializa la grilla de clientes usando Wijmo FlexGrid.
            gridClientes = new wijmo.grid.FlexGrid('#GridClientes', {
                autoGenerateColumns: false, // No genera columnas automáticamente.
                headersVisibility: 'Column', // Muestra solo los encabezados de las columnas.
                itemsSource: [], // Inicializa la grilla sin datos.
                columns: [
                    // Define las columnas de la grilla manualmente.
                    { binding: '', header: '#', width: 50, align: 'center' }, // Columna de índice.
                    { binding: 'razonSocial', header: 'Razón Social', width: '*', align: 'center' }, // Columna de Razón Social.
                    { binding: 'rfc', header: 'RFC', width: '*', align: 'center' }, // Columna de RFC.
                    { binding: 'prefijo', header: 'Prefijo', width: '*', align: 'center' }, // Columna de Prefijo.
                    { binding: 'telefono', header: 'Telefono', width: '*', align: 'center' }, // Columna de Teléfono.
                    { header: '', isReadOnly: true, width: '*', align: 'center' } // Columna vacía para acciones.
                ],
                isReadOnly: true, // La grilla es de solo lectura.
                itemFormatter: function (panel, r, c, cell) {
                    // Formateador personalizado para las celdas de la grilla.
                    if (panel.cellType === wijmo.grid.CellType.Cell) {
                        if (c === 0) {
                            // En la primera columna, muestra el número de fila.
                            cell.textContent = (r + 1).toString();
                        } else if (c === panel.columns.length - 1) {
                            // En la última columna, muestra botones de acciones.
                            const rowData = panel.rows[r].dataItem;
                            cell.innerHTML = `
                                <div class="d-flex justify-content-center align-items-center gap-2">
                                    <!-- Botón para editar el usuario externo -->
                                    <button style="height: 25px; width: 25px;" id="BtnEditarProyecto" class="btn btn-phoenix-secondary btn-icon fs--2 text-900 abrirModalEditarUsuarioExt" onclick="EditarUsuarioExterno(${rowData.id})">
                                        <svg class="svg-inline--fa fa-pen-to-square" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="pen-to-square" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                            <path fill="currentColor" d="M490.3 40.4C512.2 62.27 512.2 97.73 490.3 119.6L460.3 149.7L362.3 51.72L392.4 21.66C414.3-.2135 449.7-.2135 471.6 21.66L490.3 40.4zM172.4 241.7L339.7 74.34L437.7 172.3L270.3 339.6C264.2 345.8 256.7 350.4 248.4 353.2L159.6 382.8C150.1 385.6 141.5 383.4 135 376.1C128.6 370.5 126.4 361 129.2 352.4L158.8 263.6C161.6 255.3 166.2 247.8 172.4 241.7V241.7z"></path>
                                        </svg>
                                    </button>
                                    <!-- Botón para eliminar el usuario externo -->
                                    <button style="height: 25px; width: 25px;" class="btn btn-phoenix-secondary btn-icon fs--2 text-danger abrirModalEliminarUsuarioExt" data-nombre="${rowData.fullName}" onclick="EliminarUsuarioExterno(${rowData.id})">
                                        <svg class="svg-inline--fa fa-trash" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="trash" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                            <path fill="currentColor" d="M135.2 17.69C140.6 6.848 151.7 0 163.8 0H284.2C296.3 0 307.4 6.848 312.8 17.69L320 32H416C433.7 32 448 46.33 448 64C448 81.67 433.7 96 416 96H32C14.33 96 0 81.67 0 64C0 46.33 14.33 32 32 32H128L135.2 17.69zM394.8 466.1C393.2 492.3 372.3 512 346.9 512H101.1C75.75 512 54.77 492.3 53.19 466.1L31.1 128H416L394.8 466.1z"></path>
                                        </svg>
                                    </button>
                                    <!-- Botón para mostrar información del usuario externo -->
                                    <button style="height: 25px; width: 25px;" class="btn btn-phoenix-secondary btn-icon fs--2 text-900 abrirModalInfoUsuarioExt" onclick="mostrarInfoUsuarioExt(${rowData.id})">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16px" height="16px" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-info">
                                            <circle cx="12" cy="12" r="10"></circle>
                                            <line x1="12" y1="16" x2="12" y2="12"></line>
                                            <line x1="12" y1="8" x2="12.01" y2="8"></line>
                                        </svg>
                                    </button>
                                </div>
                            `;
                        }
                    }
                }
            });

            // Llama a la función para cargar los clientes al iniciar la página.
            verClientes();

            // Evento para recargar los clientes al hacer clic en el botón correspondiente.
            $('#btnReloadClientes').on('click', function () {
                // Muestra un mensaje de carga mientras se recargan los datos.
                Swal.fire({
                    title: 'Recargando',
                    text: 'Por favor, espere...',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Llama a la función para obtener los clientes.
                verClientes().then((serverResponseTime) => {
                    // Calcula el tiempo total de recarga (tiempo de respuesta + 2 segundos adicionales).
                    const totalRecargaTime = serverResponseTime + 2000;

                    // Muestra un mensaje de éxito después de la recarga.
                    setTimeout(() => {
                        Swal.fire({
                            title: 'Recarga completada',
                            text: 'Los clientes se han recargado correctamente.',
                            icon: 'success',
                            timer: 2000,
                            timerProgressBar: true,
                            showConfirmButton: false,
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            allowEnterKey: false,
                            showConfirmButton: false
                        });
                    }, totalRecargaTime);
                }).catch(() => {
                    // Muestra un mensaje de error si la recarga falla.
                    Swal.fire({
                        title: 'Error',
                        text: 'Hubo un error al recargar los clientes.',
                        icon: 'error',
                        timer: 2000,
                        timerProgressBar: true,
                        showConfirmButton: false,
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        allowEnterKey: false,
                        showConfirmButton: false
                    });
                });
            });
        });
        

       

        // var Empresas;
        // let coleccionUsuariosExt = [];
        // function cargarUsuariosExternos() {

        //     $.ajax({
        //         url: './getEmpresasExternas',
        //         method: 'GET',
        //         dataType: 'json',
        //         success: function (respuesta) {
        //             Empresas = respuesta.empresasExternas.map(function (elemento) {
        //                 return {
        //                     id: elemento.id,
        //                     empresa: elemento.nombre
        //                 };
        //             });

        //             const autoComplete = new wijmo.input.AutoComplete('#InpAutoComplete', {
        //                 displayMemberPath: 'empresa',
        //                 itemsSource: Empresas,
        //                 placeholder: 'Seleccione una empresa*',
        //                 selectedIndex: -1
        //             });


        //             crearUsuarioExterno(autoComplete, Empresas);


        //         },
        //         error: function (jqXHR, textStatus, errorThrown) {
        //             console.error('Error al cargar los datos:', textStatus, errorThrown);
        //         }
        //     });

        //     $.ajax({
        //         url: './getUsuariosExternos', // URL de tu API
        //         method: 'GET',
        //         dataType: 'json',
        //         success: function (data) {
        //             let nuevosDatos = data.usuariosExternos;
        //             $('.ContClientes').empty();
        //             coleccionUsuariosExt = [...nuevosDatos];
        //             // Obtener el control FlexGrid existente
        //             flexGrid = wijmo.Control.getControl('#GridClientes');

        //             // Preparar los datos para el grid
        //             usersData = nuevosDatos.map(function (elemento) {
        //                 return {
        //                     id: elemento.id,
        //                     fullName: (elemento.nombre || '') + ' ' + (elemento.apellidoPaterno || '') + ' ' + (elemento.apellidoMaterno || ''),
        //                     userName: elemento.nombreUsuario || '',
        //                     position: elemento.puesto || '',
        //                     email: elemento.email || '',
        //                     phoneNumber: elemento.telefono !== null && elemento.telefono !== undefined ? elemento.telefono : '',
        //                     company: elemento.fkEmpresa || '',
        //                 };
        //             });
        //             $(nuevosDatos).each(function (index, rowData) {

        //                 //delegaciones de eventos para abrir modal eliminar usuario
        //                 $(document).on('click', '.abrirModalEliminarUsuarioExt', function () {
        //                     $('#ModalEliminarUsuarioExterno').modal('show'); // Mostramos el modal
        //                 });
        //                 //delegaciones de eventos para abrir modal eliminar usuario
        //                 $(document).on('click', '.abrirModalInfoUsuarioExt', function () {
        //                     $('#ModalInfoUsuarioExt').modal('show'); // Mostramos el modal
        //                 });
        //                 //delegaciones de eventos para abrir modal eliminar usuario
        //                 $(document).on('click', '.abrirModalEditarUsuarioExt', function () {
        //                     $('#ModalEditarUsuarioExterno').modal('show'); // Mostramos el modal
        //                 });



        //                 const EmpresasExterna = Empresas.map(function (elemento) {
        //                     return {
        //                         id: elemento.id,
        //                         nombre: elemento.empresa
        //                     };
        //                 });

        //                 let selectedIndex = -1;
        //                 for (let i = 0; i < EmpresasExterna.length; i++) {
        //                     if (EmpresasExterna[i].nombre === rowData.fkEmpresa) {
        //                         selectedIndex = i;
        //                         break;
        //                     }
        //                 }

        //                 const element = document.querySelector(`#InpAutoCompleteEdit`);

        //                 // Verificar que el elemento existe
        //                 if (element) {
        //                     const existingControl = wijmo.Control.getControl(element);

        //                     if (existingControl) {
        //                         existingControl.itemsSource = EmpresasExterna; // Usa EmpresasExterna
        //                         existingControl.placeholder = 'Seleccione una empresa *';
        //                         existingControl.selectedIndex = selectedIndex;
        //                     } else {
        //                         // Si no existe, crea una nueva instancia de AutoComplete
        //                         const autoCompletee = new wijmo.input.AutoComplete(element, {
        //                             displayMemberPath: 'nombre',
        //                             itemsSource: EmpresasExterna, // Usa EmpresasExterna
        //                             placeholder: 'Seleccione una empresa *',
        //                             selectedIndex: selectedIndex
        //                         });
        //                     }

        //                 } else {
        //                     console.error(`No se encontró el elemento con ID: InpAutoCompleteEdit`);
        //                 }
        //             })

        //             if (flexGrid) {
        //                 // Si el FlexGrid ya existe, simplemente actualizar los datos
        //                 flexGrid.itemsSource = usersData;
        //             } else {
        //                 // Si no existe el FlexGrid, crearlo por primera vez
        //                 flexGrid = new wijmo.grid.FlexGrid('#GridClientes', {
        //                     autoGenerateColumns: false, // Desactivar generación automática de columnas
        //                     headersVisibility: 'Column',
        //                     selectionMode: 'None',
        //                     columns: [
        //                         { header: '#', isReadOnly: true, width: 50 }, // Columna de numeración
        //                         { header: 'Nombre Completo', binding: 'fullName', width: 220 },
        //                         { header: 'Puesto', binding: 'position', width: 180 },
        //                         { header: 'Número de Teléfono', binding: 'phoneNumber', width: '*' },
        //                         { header: 'Email', binding: 'email', width: '*' },
        //                         { header: 'Empresa', binding: 'company', width: '*' },
        //                         { header: 'Accion', isReadOnly: true } // Columna de botones
        //                     ],
        //                     itemsSource: usersData, // Asignación de la fuente de datos
        //                     itemFormatter: function (panel, r, c, cell) {
        //                         if (panel.cellType === wijmo.grid.CellType.Cell) {
        //                             if (c === 0) {

        //                                 cell.textContent = (r + 1).toString();
        //                             } else if (c === panel.columns.length - 1) {
        //                                 // Última columna con botones de acción
        //                                 const rowData = panel.rows[r].dataItem;
        //                                 cell.innerHTML = `
        //                                         <ul style="padding-left:10px; padding-rigth:10px;" class="nav nav-links mx-n2 action-buttons">
        //                                             <li>
        //                                                 <button style="height:25px; width:25px"  id="BtnEditarProyecto" class="btn btn-phoenix-secondary btn-icon me-1 fs--2 text-900 px-0 abrirModalEditarUsuarioExt" onclick="EditarUsuarioExterno(${rowData.id})" >
        //                                                     <svg class="svg-inline--fa fa-pen-to-square" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="pen-to-square" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
        //                                                         <path fill="currentColor" d="M490.3 40.4C512.2 62.27 512.2 97.73 490.3 119.6L460.3 149.7L362.3 51.72L392.4 21.66C414.3-.2135 449.7-.2135 471.6 21.66L490.3 40.4zM172.4 241.7L339.7 74.34L437.7 172.3L270.3 339.6C264.2 345.8 256.7 350.4 248.4 353.2L159.6 382.8C150.1 385.6 141.5 383.4 135 376.1C128.6 370.5 126.4 361 129.2 352.4L158.8 263.6C161.6 255.3 166.2 247.8 172.4 241.7V241.7zM192 63.1C209.7 63.1 224 78.33 224 95.1C224 113.7 209.7 127.1 192 127.1H96C78.33 127.1 64 142.3 64 159.1V416C64 433.7 78.33 448 96 448H352C369.7 448 384 433.7 384 416V319.1C384 302.3 398.3 287.1 416 287.1C433.7 287.1 448 302.3 448 319.1V416C448 469 405 512 352 512H96C42.98 512 0 469 0 416V159.1C0 106.1 42.98 63.1 96 63.1H192z"></path>
        //                                                     </svg>
        //                                                 </button>
        //                                             </li>
        //                                             <li>
        //                                                 <button style="height:25px; width:25px" class="btn btn-phoenix-secondary btn-icon fs--2 text-danger px-0 abrirModalEliminarUsuarioExt" data-nombre="${rowData.nombre}" onclick="EliminarUsuarioExterno(${rowData.id})" >
        //                                                     <svg class="svg-inline--fa fa-trash" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="trash" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
        //                                                         <path fill="currentColor" d="M135.2 17.69C140.6 6.848 151.7 0 163.8 0H284.2C296.3 0 307.4 6.848 312.8 17.69L320 32H416C433.7 32 448 46.33 448 64C448 81.67 433.7 96 416 96H32C14.33 96 0 81.67 0 64C0 46.33 14.33 32 32 32H128L135.2 17.69zM394.8 466.1C393.2 492.3 372.3 512 346.9 512H101.1C75.75 512 54.77 492.3 53.19 466.1L31.1 128H416L394.8 466.1z"></path>
        //                                                     </svg>
        //                                                 </button>
        //                                             </li>
        //                                              <li>
        //                                                 <button style="height:25px; width:25px; margin-left:4px;" class="btn btn-phoenix-secondary btn-icon fs--2 text-danger px-0 abrirModalInfoUsuarioExt" onclick="mostrarInfoUsuarioExt(${rowData.id})"  >
        //                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16px" height="16px" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-info text-900 fs-3"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
        //                                                 </button>
        //                                             </li>
        //                                         </ul>
        //                                     `;
        //                             }





        //                         }
        //                     }
        //                 });
        //             }
        //         },
        //         error: function (error) {
        //             console.error('Error al cargar los datos:', error);
        //         }
        //     });
        // }

        // var resize_func = [];
        // resize_func.push(function () {
        //     $('#GridClientes').height(window.innerHeight - $('.card').offset().top - 195);
        // });
        // $(document).ready(function () {
        //     resizeWidth();
        // });



        // function limpiarTodosLosInputs() {
        //     const inputs = document.querySelectorAll('input');
        //     inputs.forEach(input => {
        //         if (input.name !== '_token') {
        //             input.value = '';
        //         }
        //     });
        // };




        // document.addEventListener('DOMContentLoaded', function () {
        //     cargarUsuariosExternos();
        // });

        // function crearUsuarioExterno(autoComplete, Empresas) {
        //     $("#InpEmailExterno").val('');
        //     var Empresa = Empresas;
        //     var imagenSeleccionada;

        //     // Eliminar el evento previo en #InpImagenExt para evitar duplicación
        //     $("#InpImagenExt").off("change").on("change", function () {
        //         imagenSeleccionada = this.files[0];
        //         console.log("Imagen seleccionada:", imagenSeleccionada || "Ninguna imagen seleccionada");
        //     });

        //     // Eliminar el evento previo en #BtnAgregarUsuarioExt para evitar duplicación
        //     $(document).off('click', '#BtnAgregarUsuarioExt').on('click', '#BtnAgregarUsuarioExt', function () {
        //         var token = $('input[name="_token"]').val();
        //         const nombre = $("#InpNombresExterno").val();
        //         const apellidoPaterno = $("#InpApellidoPaternoExterno").val();
        //         const apellidoMaterno = $("#InpApellidoMaternoExterno").val();
        //         const nombreUsuario = $("#InpNombreUsuarioExterno").val();
        //         const email = $("#InpEmailExterno").val();
        //         const telefono = $("#InpTelefonoExterno").val();
        //         const puesto = $("#InpPuestoExterno").val();
        //         const contrasenia = $("#InpContraseniaExterno").val();
        //         const confirmarContrasenia = $("#InpConfirmarContraseniaExterno").val();

        //         const formData = new FormData();
        //         formData.append('_token', token);
        //         formData.append('nombre', nombre);
        //         formData.append('apellidoPaterno', apellidoPaterno);
        //         formData.append('apellidoMaterno', apellidoMaterno);
        //         formData.append('nombreUsuario', nombreUsuario);
        //         formData.append('email', email);
        //         formData.append('telefono', telefono);
        //         formData.append('puesto', puesto);
        //         formData.append('contrasenia', contrasenia);
        //         formData.append('confirmar', confirmarContrasenia);

        //         if (imagenSeleccionada) {
        //             formData.append('imagen', imagenSeleccionada);
        //         } else {
        //             console.log("No se seleccionó ninguna imagen.");
        //         }

        //         if (!autoComplete) {
        //             console.error('Control AutoComplete no encontrado.');
        //             return;
        //         }

        //         const empresa = autoComplete.selectedItem ? autoComplete.selectedItem.empresa : null;
        //         formData.append('empresa', empresa);

        //         const esValido = validarYAgregarUsuario(nombre, apellidoPaterno, apellidoMaterno, nombreUsuario, email, telefono, contrasenia, confirmarContrasenia, puesto, empresa);
        //         if (!esValido) {
        //             return;
        //         }

        //         // Realizar la solicitud AJAX
        //         $.ajax({
        //             type: "POST",
        //             url: "./crearUsuariosExternos",
        //             data: formData,
        //             processData: false,
        //             contentType: false,
        //             success: function (data) {
        //                 cargarUsuariosExternos(Empresa);
        //                 if (data.Codigo == 0) {
        //                     Swal.fire({
        //                         icon: 'success',
        //                         title: 'Éxito',
        //                         text: data.Mensaje
        //                     });
        //                 }
        //                 $("#ModalCrearProyecto").modal('hide');

        //                 // Limpiar los inputs manualmente
        //                 $("#InpNombresExterno").val('');
        //                 $("#InpApellidoPaternoExterno").val('');
        //                 $("#InpApellidoMaternoExterno").val('');
        //                 $("#InpNombreUsuarioExterno").val('');
        //                 $("#InpEmailExterno").val('');
        //                 $("#InpTelefonoExterno").val('');
        //                 $("#InpPuestoExterno").val('');
        //                 $("#InpContraseniaExterno").val('');
        //                 $("#InpConfirmarContraseniaExterno").val('');
        //                 $("#InpUsuarioIntImagen").val('');
        //                 $('.ContAlerta').empty();
        //                 imagenSeleccionada = null;
        //                 $("#InpImagenExt").val('');
        //                 $("#InpAutoComplete").val('');
        //                 autoComplete.selectedIndex = -1;
        //             },
        //             error: function (error) {
        //                 Swal.fire({
        //                     icon: 'error',
        //                     title: 'Error',
        //                     text: 'Error en la acción solicitada.'
        //                 });
        //                 $('.ContAlerta').empty();
        //                 console.error('Error editando sistema:', error);
        //             }
        //         });
        //     });
        // }
        // // "@IdUsuario"

        // function EliminarUsuarioExterno(id) {

        //     // Eliminar el evento previo en .BtnEliminarUsuarioExterno para evitar duplicación
        //     $(document).off('click', '.BtnEliminarUsuarioExterno').on('click', '.BtnEliminarUsuarioExterno', function () {
        //         var token = $('input[name="_token"]').val();
        //         const modal = $(this).closest('.modal');

        //         $.ajax({
        //             type: "post",
        //             url: "./EliminarUsuarioExterno",
        //             data: { _token: token, Id: id },
        //             success: function (data) {

        //                 if (data.Codigo == 0) {
        //                     Swal.fire({
        //                         icon: 'success',
        //                         title: 'Éxito',
        //                         text: data.Mensaje
        //                     });
        //                 }
        //                 modal.modal('hide');
        //                 cargarUsuariosExternos();
        //             },
        //             error: function (error) {
        //                 Swal.fire({
        //                     icon: 'error',
        //                     title: 'Error',
        //                     text: 'No se pudo eliminar el usuario.'
        //                 });
        //                 console.error('Error eliminando usuario:', error);
        //             }
        //         });
        //     });
        // }


        // function buscar() {
        //     // Añadir un evento para el filtrado dinámico
        //     document.getElementById('buscador').addEventListener('input', function (e) {
        //         var filter = e.target.value.toLowerCase();

        //         // Aplicar el filtro a la colección de datos del grid actual
        //         flexGrid.collectionView.filter = function (item) {
        //             // Ajustar aquí según la columna que quieras filtrar, en este caso "Name"
        //             return filter.length == 0 || item.fullName.toLowerCase().indexOf(filter) > -1;
        //         };
        //     });
        // }

        // function EditarUsuarioExterno(id) {
        //     const UsuarioExt = coleccionUsuariosExt.find(item => item.id === id);
        //     let img = UsuarioExt.imagenPerfil;
        //     $('#InpNombresExternoEdit').val(UsuarioExt.nombre);
        //     $('#InpApellidoPaternoExternoEdit').val(UsuarioExt.apellidoPaterno);
        //     $('#InpApellidoMaternoExternoEdit').val(UsuarioExt.apellidoMaterno);
        //     $('#InpNombreUsuarioExternoEdit').val(UsuarioExt.nombreUsuario);
        //     $('#InpEmailExternoEdit').val(UsuarioExt.email);
        //     $('#InpTelefonoExternoEdit').val(UsuarioExt.telefono);
        //     $('#InpContrasenaExternoEdit').val(UsuarioExt.password);
        //     $('#InpPuestoExternoEdit').val(UsuarioExt.puesto);
        //     $(".previewImage").attr("src", img);
        //     const fileName = img.split("\\").pop().split("/").pop();
        //     $('.fileName2').text(fileName);

        //     $('#InpConfirmarContrasenaExternoEdit').val(UsuarioExt.password);
        //     $(".fullnameuser").text("Editar Usuario: " + UsuarioExt.nombre + " " + UsuarioExt.apellidoPaterno + " " + (UsuarioExt.apellidoMaterno || " "));
        //     $(document).off('click', '.EditarUsuarioExterno').on('click', '.EditarUsuarioExterno', function () {
        //         const nombreExterno = $(`#InpNombresExternoEdit`).val();
        //         const apellidoPaterno = $(`#InpApellidoPaternoExternoEdit`).val();
        //         var token = $('input[name="_token"]').val();
        //         const apellidoMaterno = $(`#InpApellidoMaternoExternoEdit`).val();
        //         const nombreUsuario = $(`#InpNombreUsuarioExternoEdit`).val();
        //         const email = $(`#InpEmailExternoEdit`).val();
        //         const telefono = $(`#InpTelefonoExternoEdit`).val();
        //         const puesto = $(`#InpPuestoExternoEdit`).val();
        //         const contrasena = $(`#InpContrasenaExternoEdit`).val();
        //         const confirmarContrasena = $(`#InpConfirmarContrasenaExternoEdit`).val();
        //         let imagenSeleccionada = $(`#InpUsuarioExtImagenEdit`)[0].files[0];

        //         const empresaSeleccionada = wijmo.Control.getControl(`#InpAutoCompleteEdit`).text;

        //         const formData = new FormData();
        //         formData.append('_token', $('input[name="_token"]').val());
        //         formData.append('id', id);
        //         formData.append('nombre', nombreExterno);
        //         formData.append('apellidoPaterno', apellidoPaterno);
        //         formData.append('apellidoMaterno', apellidoMaterno);
        //         formData.append('nombreUsuario', nombreUsuario);
        //         formData.append('email', email);
        //         formData.append('telefono', telefono);
        //         formData.append('puesto', puesto);
        //         formData.append('contrasenia', contrasena);
        //         formData.append('confirmar', confirmarContrasena);

        //         if (imagenSeleccionada) {
        //             formData.append('imagen', imagenSeleccionada);
        //         }

        //         formData.append('empresaSeleccionada', empresaSeleccionada);

        //         const esValido = validarYAgregarUsuario(nombreExterno, apellidoPaterno, apellidoMaterno, nombreUsuario,
        //             email, telefono, contrasena, confirmarContrasena, puesto, empresaSeleccionada);
        //         if (!esValido) {
        //             return;
        //         }

        //         // Realizar la solicitud AJAX
        //         $.ajax({
        //             type: "POST",
        //             url: "./editarUsuarioExterno",
        //             data: formData,
        //             processData: false,
        //             contentType: false,
        //             success: function (data) {
        //                 cargarUsuariosExternos();
        //                 $(`#ModalEditarUsuario${id}`).modal('hide'); // Cerrar el modal correcto
        //                 Swal.fire({
        //                     icon: 'success',
        //                     title: 'Éxito',
        //                     text: 'Éxito en la acción solicitada'
        //                 });
        //                 $('.ContAlerta').empty();
        //                 $(`#ModalEditarUsuarioExterno`).modal('hide');
        //             },
        //             error: function (error) {
        //                 if (data.Codigo == 0) {
        //                     Swal.fire({
        //                         icon: 'success',
        //                         title: 'Éxito',
        //                         text: data.Mensaje
        //                     });
        //                 }
        //                 $('.ContAlerta').empty();
        //                 console.error('Error editando sistema:', error);
        //             }
        //         });
        //     });
        // }

        // document.addEventListener('DOMContentLoaded', function () {
        //     buscar();
        // });

        // $('#GridClientes').on('click', '.abrirModalEliminarUsuarioExt', function () {
        //     // Encuentra el card asociado al botón que se hizo clic
        //     const card = $(this).closest('.abrirModalEliminarUsuarioExt');
        //     const nombreUsuario = card.data('nombre'); // Obtiene la descripción del card

        //     // Actualiza el contenido del modal
        //     $('.nombreUsuario').text(nombreUsuario);


        // });

        // function mostrarInfoUsuarioExt(id) {
        //     const usuarioExt = coleccionUsuariosExt.find(item => item.id === id);
        //     if (usuarioExt) {
        //         let img = usuarioExt.imagenPerfil;
        //         let imgEmp = usuarioExt.imagen;
        //         $(".nombreCompletoUsuarioInt").text(usuarioExt.nombre + " " + usuarioExt.apellidoPaterno + " " + (usuarioExt.apellidoMaterno || " "));
        //         $(".Activo").text(usuarioExt.activo);
        //         $(".nombreUsuarioExt").text(usuarioExt.nombreUsuario);
        //         $(".fechaIngresoUsuarioExt").text(usuarioExt.FechaDeIngreso);
        //         $(".emailUsuarioExt").text(usuarioExt.email);
        //         $(".telefonoUsuarioExt").text(usuarioExt.telefono);

        //         $(".empresaUsuarioExt").text(usuarioExt.fkEmpresa);
        //         $(".puestoUsuarioExt").text(usuarioExt.puesto);

        //         $(".imagenEmpresa").attr("src", imgEmp);
        //         $(".imagenPerfil").attr("src", img);
        //     } else {
        //         console.log("No se encontró ninguna actividad con el id:", id);
        //     }
        // }

        // // para previsualizar la imagen que se carga
        // document.getElementById("InpImagenExt").addEventListener("change", function (event) {
        //     const file = event.target.files[0];
        //     const previewContainer = document.getElementById("previewContainer");
        //     const previewImage = document.getElementById("previewImage");
        //     const fileName = document.getElementById("fileName");
        //     const fileSize = document.getElementById("fileSize");
        //     const removePreview = document.getElementById("removePreview");

        //     if (file) {
        //         const reader = new FileReader();
        //         reader.onload = function (e) {
        //             previewImage.src = e.target.result;
        //             fileName.textContent = file.name;
        //             fileSize.textContent = `${(file.size / 1024).toFixed(2)} KB`;
        //             previewContainer.classList.remove("d-none");
        //         };

        //         reader.readAsDataURL(file);
        //     }

        //     removePreview.addEventListener("click", function () {
        //         previewContainer.classList.add("d-none");
        //         previewImage.src = "";
        //         fileName.textContent = "";
        //         fileSize.textContent = "";
        //         document.getElementById("InpImagenExt").value = "";
        //     });
        // });

        // // para previsualizar la imagen que se carga en el modal de editar
        // $(document).ready(function () {
        //     $('#InpUsuarioExtImagenEdit').change(function (event) {
        //         const file = event.target.files[0];
        //         if (file) {
        //             const reader = new FileReader();
        //             reader.onload = function (e) {
        //                 $('#previewContainer2').removeClass('d-none');
        //                 $('#previewImage2').attr('src', e.target.result);
        //                 $('#fileName2').text(file.name);
        //                 $('#fileSize2').text((file.size / 1024).toFixed(2) + ' KB');
        //             }

        //             reader.readAsDataURL(file); // Leer el archivo como URL de datos
        //         }
        //     });

        //     $('#removePreview2').click(function () {
        //         $('#previewContainer2').addClass('d-none');
        //         $('#InpUsuarioExtImagenEdit').val('');
        //         $('#previewImage2').attr('src', '');
        //         $('#fileName2').text('');
        //         $('#fileSize2').text('');
        //     });
        // });
    </script>
}