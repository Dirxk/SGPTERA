@{
    ViewData["Title"] = "Usuarios";
    var IdUsuario = ViewBag.IdUsuario;

}

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Rubik:wght@500&display=swap" rel="stylesheet">

<!-- ================================================================================================= -->
<!-- ======================================== Codigo Principal ======================================= -->
<!-- ================================================================================================= -->
<div class="card d-flex flex-column">
    <div class="card-header d-flex flex-column flex-md-row align-items-center justify-content-center justify-content-md-between">
        <!-- Primera columna: Título -->
        <div class="col-12 col-md-6 d-flex align-items-center justify-content-center justify-content-md-start mb-3 mb-md-0">
            <i class="fa-solid fa-users fa-lg me-2 d-none d-md-block"></i>
            <i class="fa-solid fa-users me-2 mb-2 d-block d-md-none"></i>
            <h3 class="m-0 d-none d-md-block" style="font-family: 'Rubik', sans-serif; font-size: 1.25rem;">Usuarios</h3>
            <h6 class="m-0 d-block d-md-none mb-1" style="font-family: 'Rubik', sans-serif; font-size: 1rem;">Usuarios</h6>
        </div>

        <!-- Segunda columna: Búsqueda y botones -->
        <div class="col-12 col-md-6 d-flex justify-content-center justify-content-md-end gap-2 mt-2 mt-md-0">
            <!-- Input de búsqueda -->
            <input id="inputBusqueda" class="form-control form-control-sm w-50" type="search" placeholder="Buscar" aria-label="Search">
            <!-- Botón de búsqueda -->
            <button id="btnBuscar" class="btn btn-info btn-sm" type="submit">
                <i class="fas fa-search"></i>
            </button>
            <!-- Botón de recargar -->
            <button type="button" id="btnReloadUsuarios" name="btnReloadUsuarios" class="btn btn-warning btn-sm">
                <i class="fas fa-sync-alt"></i>
            </button>
            <!-- Botón de agregar usuario -->
            <button type="button" class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#UserModal">
                <i class="fas fa-plus"></i>
            </button>
        </div>
    </div>
    <div class="card-body p-3 flex-grow-1">
        <div class="table-responsive scrollbar h-100">
            <!-- Grilla de usuarios -->
            <div id="GridUsuarios" style="width: 100%; height: 74vh;"></div>
            <!-- Mensaje de "Usuario no encontrado" -->
            <div id="mensajeNoEncontrado" class="text-danger mt-2" style="display: none;">Usuario no encontrado</div>
        </div>
    </div>
</div>

<!-- ================================================================================================= -->
<!-- ======================================= Modal nuevo cliente ===================================== -->
<!-- ================================================================================================= -->

<div class="modal fade" id="UserModal" tabindex="-1" aria-labelledby="UserModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <form id="FormCrearUsuario">
                <div class="modal-header">
                    <h3 class="modal-title" id="UserModalLabel">Agregar nuevo usuario</h3>
                    <button type="button" class="btn-close cerrarModal" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <!-- Campo: Usuario -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpUsuario" name="InpUsuario" type="text" placeholder="Usuario" required autocomplete="off" />
                                <label for="InpUsuario">Nombre de usuario <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: NombreUsuario -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpNombreUsuario" name="InpNombreUsuario" type="text" placeholder="Nombre" required autocomplete="off" />
                                <label for="InpNombreUsuario">Nombre(s) <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: ApellidoPaternoUsuario -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpApellidoPaternoUsuario" name="InpApellidoPaternoUsuario" type="text" placeholder="Apellido Paterno" required autocomplete="off" />
                                <label for="InpApellidoPaternoUsuario">Apellido paterno <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: ApellidoMaternoUsuario -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpApellidoMaternoUsuario" name="InpApellidoMaternoUsuario" type="text" placeholder="Apellido Materno" required autocomplete="off" />
                                <label for="InpApellidoMaternoUsuario">Apellido materno <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: IdPuesto -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <select class="form-select" id="InpPuesto" name="InpPuesto">
                                    <option value="">Seleccione una opción</option>
                                    <!-- Las opciones se llenarán dinámicamente aquí -->
                                </select>
                                <label for="InpPuesto">Puesto <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: Teléfono -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpTelefono" name="InpTelefono" type="text" placeholder="Teléfono" maxlength="15" required autocomplete="off" />
                                <label for="InpTelefono">Teléfono <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: Correo -->
                        <div class="col-12 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpCorreo" name="InpCorreo" type="email" placeholder="Correo" required autocomplete="off" />
                                <label for="InpCorreo">Correo <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: Contraseña -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpContrasena" name="InpContrasena" type="password" placeholder="Contraseña" maxlength="15" required autocomplete="off" />
                                <label for="InpContrasena">Contraseña <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: Repetir Contraseña -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpRepetirContrasena" name="InpRepetirContrasena" type="password" placeholder="Repetir Contraseña" maxlength="15" required autocomplete="off" />
                                <label for="InpRepetirContrasena">Repite la contraseña <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: Imagen -->
                        <div class="col-12 mb-3">
                            <label class="fw-bold mb-2" style="font-size: 1rem;">Imagen para el usuario:</label>
                            <input class="form-control" id="InpImagenExt" name="InpImagenExt" type="file" accept="image/*" required />
                        </div>
                        <!-- Previsualización de la imagen -->
                        <div class="col-12 mb-3">
                            <div id="previewContainer" class="d-none border rounded p-3 d-flex align-items-center justify-content-between">
                                <div class="d-flex align-items-center">
                                    <img id="previewImage" src="" alt="Previsualización" class="img-thumbnail me-3" style="max-width: 150px; max-height: 150px; object-fit: contain;">
                                    <div>
                                        <p id="fileName" class="mb-0 fw-bold"></p>
                                        <small id="fileSize" class="text-muted"></small>
                                    </div>
                                </div>
                                <button type="button" class="btn btn-link text-danger p-0" id="removePreview" aria-label="Eliminar previsualización">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        </div>
                        <!-- Contenedor para alertas -->
                        <div class="col-12">
                            <div class="ContAlerta"></div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger cerrarModal" data-bs-dismiss="modal">
                        <i class="fas fa-ban me-2"></i>Cancelar
                    </button>
                    <button type="submit" class="btn btn-success px-5" id="BtnAgregarUsuarioExt">
                        <i class="fas fa-user-plus me-2"></i>Agregar usuario
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- ================================================================================================= -->
<!-- ====================================== Modal editar cliente ===================================== -->
<!-- ================================================================================================= -->

<div class="modal fade" id="ModalEditarUsuario" tabindex="-1" aria-labelledby="ModalEditarUsuarioLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <form id="FormEditarUsuario">
                <div class="modal-header">
                    <h5 class="modal-title" id="ModalEditarUsuarioLabel">Editar Usuario</h5>
                    <button type="button" class="btn-close cerrarModalEditarUsuario" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <!-- Campo: Usuario -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpUsuarioEdit" name="InpUsuarioEdit" type="text" placeholder="Usuario" required autocomplete="off" />
                                <label for="InpUsuarioEdit">Nombre de usuario <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: NombreUsuario -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpNombreUsuarioEdit" name="InpNombreUsuarioEdit" type="text" placeholder="Nombre" required autocomplete="off" />
                                <label for="InpNombreUsuarioEdit">Nombre(s) <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: ApellidoPaternoUsuario -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpApellidoPaternoUsuarioEdit" name="InpApellidoPaternoUsuarioEdit" type="text" placeholder="Apellido Paterno" required autocomplete="off" />
                                <label for="InpApellidoPaternoUsuarioEdit">Apellido paterno <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: ApellidoMaternoUsuario -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpApellidoMaternoUsuarioEdit" name="InpApellidoMaternoUsuarioEdit" type="text" placeholder="Apellido Materno" required autocomplete="off" />
                                <label for="InpApellidoMaternoUsuarioEdit">Apellido materno <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: IdPuesto -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <select class="form-select" id="InpPuestoEdit" name="InpPuestoEdit">
                                    <option value="">Seleccione una opción</option>
                                    <!-- Las opciones se llenarán dinámicamente aquí -->
                                </select>
                                <label for="InpPuestoEdit">Puesto <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: Teléfono -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpTelefonoEdit" name="InpTelefonoEdit" type="text" placeholder="Teléfono" maxlength="15" required autocomplete="off" />
                                <label for="InpTelefonoEdit">Teléfono <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: Correo -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpCorreoEdit" name="InpCorreoEdit" type="email" placeholder="Correo" required autocomplete="off" />
                                <label for="InpCorreoEdit">Correo <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: Contraseña -->
                        <div class="col-12 col-md-6 mb-3">
                            <div class="form-floating">
                                <input class="form-control" id="InpContrasenaEdit" name="InpContrasenaEdit" type="password" placeholder="Contraseña" maxlength="15" required autocomplete="off" />
                                <label for="InpContrasenaEdit">Nueva Contraseña <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <!-- Campo: Imagen -->
                        <div class="col-sm-12 mt-4">
                            <label class="fw-bold mb-2" style="font-size: 1rem;">Logotipo del usuario:</label>
                            <input class="form-control" id="InpUsuarioImagenEdit" name="imagen" type="file" accept="image/*" />
                        </div>
                        <div class="col-12 mt-3">
                            <div id="previewContainerEdit" class="border rounded p-3 d-flex align-items-center justify-content-between">
                                <div class="d-flex align-items-center">
                                    <img id="previewImageEdit" src="" alt="Previsualización" class="img-thumbnail me-3 previewImage" style="max-width: 150px; max-height: 150px; object-fit: contain;">
                                    <div>
                                        <p id="fileNameEdit" class="mb-0 fw-bold"></p>
                                        <small id="fileSizeEdit" class="text-muted"></small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="ContAlertaEdit" class="col-12"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger cerrarModalEditarUsuario">Cancelar</button>
                    <button type="button" class="btn btn-success EditarUsuario" id="btnActualizarUsuario">Actualizar Usuario</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- ================================================================================================= -->
<!-- ====================================== Modal eliminar cliente =================================== -->
<!-- ================================================================================================= -->
<div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="ModalEliminarUsuario" tabindex="-1" aria-labelledby="verticallyCenteredModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form id="FormEliminarUsuario">
                <div class="modal-header">
                    <h5 class="modal-title" id="verticallyCenteredModalLabel">Eliminar Usuario</h5>
                    <button class="btn p-1" type="button" data-bs-dismiss="modal" aria-label="Close">
                        <span class="fas fa-times fs--1"></span>
                    </button>
                </div>
                <div class="modal-body">
                    <p class="text-700 lh-lg mb-0">
                        ¿Deseas eliminar el usuario <strong class="nombreUsuario"></strong>?
                    </p>
                </div>
                <div class="modal-footer">
                    <div class="col-auto">
                        <button class="btn btn-primary me-1 mb-1" type="button" data-bs-dismiss="modal">Cancelar</button>
                    </div>
                    <div class="col-auto">
                        <button class="btn btn-danger me-1 mb-1" type="submit" id="BtnEliminarUsuario">Eliminar</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- ================================================================================================= -->
<!-- ====================================== Modal reactivar cliente ================================== -->
<!-- ================================================================================================= -->

<div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="ModalConfirmarUsuario" tabindex="-1" aria-labelledby="verticallyCenteredModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form id="FormConfirmarUsuario">
                <div class="modal-header">
                    <h5 class="modal-title" id="verticallyCenteredModalLabel">Reactivar Usuario</h5>
                    <button class="btn p-1" type="button" data-bs-dismiss="modal" aria-label="Close">
                        <span class="fas fa-times fs--1"></span>
                    </button>
                </div>
                <div class="modal-body">
                    <p class="text-700 lh-lg mb-0">
                        ¿Deseas reactivar el usuario <strong class="nombreConfirmarUsuario"></strong>?
                    </p>
                </div>
                <div class="modal-footer">
                    <div class="col-auto">
                        <button class="btn btn-primary me-1 mb-1" type="button" data-bs-dismiss="modal">Cancelar</button>
                    </div>
                    <div class="col-auto">
                        <button class="btn btn-success me-1 mb-1" type="submit" id="BtnConfirmarUsuario">Reactivar</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>

        //============================================================================================================================\\
        //====================================================  Variables Globales  ===================================================\\
        //==============================================================================================================================\\
        // Variable global para almacenar la instancia de la grilla de clientes.
        var gridUsuarios = null;


        // Función que realiza una solicitud AJAX para obtener los usuarios desde el servidor.
        function verUsuarios() {
            return new Promise((resolve, reject) => {
                const startTime = performance.now(); // Inicia el contador para medir el tiempo de respuesta.

                $.ajax({
                    type: 'POST', // Método HTTP utilizado para la solicitud.
                    data: {}, // Datos enviados al servidor (en este caso, vacío).
                    url: '@Url.Action("GetUsuarios", "Catalogos")', // URL de la acción para obtener usuarios.
                    success: function (datos) {
                        const endTime = performance.now(); // Finaliza el contador de tiempo.
                        const serverResponseTime = endTime - startTime; // Calcula el tiempo de respuesta del servidor.
                        gridUsuarios.itemsSource = datos.data; // Asigna los datos recibidos a la grilla de usuarios.
                        resolve(serverResponseTime); // Resuelve la promesa con el tiempo de respuesta.
                    },
                    error: function () {
                        console.error("Error al obtener los usuarios."); // Maneja errores en la solicitud.
                        reject(); // Rechaza la promesa en caso de error.
                    }
                });
            });
        }

        //============================================================================================================================\\
        //================================  Función para editar un cliente específico basado en su ID  ================================\\
        //==============================================================================================================================\\

        let valoresIniciales = {}; // Almacena los valores iniciales del usuario
        const camposEdicion = ['#InpUsuarioEdit', '#InpNombreUsuarioEdit', '#InpApellidoPaternoUsuarioEdit', '#InpApellidoMaternoUsuarioEdit', '#InpTelefonoEdit', '#InpCorreoEdit', '#InpUsuarioImagenEdit'];

        function EditarUsuario(id) {
            const usuario = gridUsuarios.itemsSource.find(u => u.id === id); // Busca el usuario en la grilla.
            if (usuario) {
                // Guardar los valores iniciales del usuario
                valoresIniciales = {
                    usuario: usuario.usuario || '',
                    nombreUsuario: usuario.nombreUsuario || '',
                    apellidoPaternoUsuario: usuario.apellidoPaternoUsuario || '',
                    apellidoMaternoUsuario: usuario.apellidoMaternoUsuario || '',
                    telefono: usuario.telefono || '',
                    correo: usuario.correo || '',
                    fotoPerfil: usuario.fotoPerfil || ''
                };

                // Asigna los valores del usuario a los campos del formulario de edición.
                $('#InpUsuarioEdit').val(valoresIniciales.usuario);
                $('#InpNombreUsuarioEdit').val(valoresIniciales.nombreUsuario);
                $('#InpApellidoPaternoUsuarioEdit').val(valoresIniciales.apellidoPaternoUsuario);
                $('#InpApellidoMaternoUsuarioEdit').val(valoresIniciales.apellidoMaternoUsuario);
                $('#InpTelefonoEdit').val(valoresIniciales.telefono);
                $('#InpCorreoEdit').val(valoresIniciales.correo);

                // Muestra la imagen del usuario si está disponible.
                if (usuario.fotoPerfil && typeof usuario.fotoPerfil === 'string') {
                    $('#previewImageEdit').attr('src', `data:image/png;base64,${usuario.fotoPerfil}`);
                    $('#previewContainerEdit').css('display', 'flex');
                } else {
                    $('#previewContainerEdit').hide();
                }

                llenarComboUsuarios(true);

                // Deshabilitar el botón de actualizar inicialmente
                $('#btnActualizarUsuario').prop('disabled', true);

                // Muestra el modal de edición de usuario.
                const modalEditarUsuario = new bootstrap.Modal($('#ModalEditarUsuario')[0]);
                modalEditarUsuario.show();
                $('#btnActualizarUsuario').data('id', id); // Asigna el ID del usuario al botón de actualizar.
            } else {
                console.error("Usuario no encontrado."); // Maneja el caso en que el usuario no existe.
            }
        }

        // Función para habilitar el botón si algún campo ha cambiado
        function habilitarBotonActualizar() {
            let algunCampoCambiado = false;

            // Comparar los valores actuales con los valores iniciales
            if ($('#InpRazonSocialEdit').val() !== valoresIniciales.razonSocial ||
                $('#InpRFCEdit').val() !== valoresIniciales.rfc ||
                $('#InpPrefijoEdit').val() !== valoresIniciales.prefijo ||
                $('#InpTelefonoEdit').val() !== valoresIniciales.telefono ||
                $('#InpContrasenaEdit').val() !== valoresIniciales.telefono ||
                $('#InpUsuarioImagenEdit')[0].files.length > 0) {
                algunCampoCambiado = true;
            }

            // Habilita el botón si algún campo ha cambiado
            $('#btnActualizarUsuario').prop('disabled', !algunCampoCambiado);
        }

        // Captura el evento de cambio o entrada en cualquier campo dentro de un contenedor (por ejemplo, un formulario)
        $('#FormEditarUsuario').on('input change', function () {
            habilitarBotonActualizar();
        });

        // También puedes capturar el clic en cualquier botón dentro del formulario
        $('#FormEditarUsuario').on('click', 'button', function () {
            habilitarBotonActualizar();
        });
        // Escucha los cambios en los campos del formulario
        camposEdicion.forEach(function (campo) {
            $(campo).on('input change', function () {
                habilitarBotonActualizar();
            });
        });

        // Escucha el evento de cambio en el input de la imagen
        $('#InpUsuarioImagenEdit').on('change', function (event) {
            const file = event.target.files[0]; // Obtiene el archivo seleccionado.
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    $('#previewImageEdit').attr('src', e.target.result); // Muestra la imagen.
                    $('#fileNameEdit').text(file.name); // Muestra el nombre del archivo.
                    $('#fileSizeEdit').text((file.size / 1024).toFixed(2) + ' KB'); // Muestra el tamaño del archivo.
                    $('#previewContainerEdit').removeClass('d-none'); // Muestra el contenedor de previsualización.
                };
                reader.readAsDataURL(file); // Lee el archivo como URL.
            }
            habilitarBotonActualizar();
        });

        // Evento para limpiar el formulario al cerrar el modal
        $('#ModalEditarUsuario').on('hidden.bs.modal', function () {
            $('#FormEditarUsuario')[0].reset(); // Restablece el formulario.
            $('#previewImageEdit').attr('src', ''); // Limpia la imagen.
            $('#fileNameEdit').text(''); // Limpia el nombre del archivo.
            $('#fileSizeEdit').text(''); // Limpia el tamaño del archivo.
            $('#btnActualizarUsuario').prop('disabled', true); // Bloquea el botón de actualizar.
        });

        //============================================================================================================================\\
        //===============================  Inicialización del GRID Clientes y Configuración de Eventos  ===============================\\
        //==============================================================================================================================\\

        function llenarComboUsuarios(esEdicion = false) {
            $.ajax({
                type: 'POST', // Método HTTP
                url: '@Url.Action("GetUsuariosPuestos", "Catalogos")', // Ruta del servidor
                success: function (response) {
                    console.log("Respuesta del servidor:", response); // Verifica la estructura de la respuesta

                    if (response.resultado && response.data && response.data.length > 0) {
                        // Selecciona el combo box según el parámetro esEdicion
                        var combo = esEdicion ? $('#InpPuestoEdit') : $('#InpPuesto');
                        combo.empty(); // Limpiar el combo box
                        combo.append('<option value="">Seleccione una opción</option>'); // Opción por defecto

                        // Llenar el combo box con las razones sociales
                        response.data.forEach(function (puesto) {
                            console.log("Puesto:", puesto); // Verifica cada cliente
                            combo.append('<option value="' + puesto.id + '">' + puesto.descripcion + '</option>');
                        });
                    } else {
                        console.error("No se pudieron obtener los puestos o la respuesta está vacía.");
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error("Error al obtener los puestos:", textStatus, errorThrown);
                }
            });
        }

        //============================================================================================================================\\
        //===============================  Inicialización del GRID Clientes y Configuración de Eventos  ===============================\\
        //==============================================================================================================================\\

        $(document).ready(function () {

            //============================================================================================================================\\
            //==========================================               GRID Principal                ======================================\\
            //==============================================================================================================================\\
            gridUsuarios = new wijmo.grid.FlexGrid('#GridUsuarios', {
                autoGenerateColumns: false,
                headersVisibility: 'Column',
                itemsSource: [],
                selectionMode: wijmo.grid.SelectionMode.Row,
                columns: [
                    { binding: '', header: '#', width: 50, align: 'center' },
                    { binding: 'usuario', header: 'Usuario', width: 200, align: 'center' },
                    {
                        binding: 'nombreCompleto',
                        header: 'Nombre Completo',
                        minWidth: 220,
                        width: '*',
                        align: 'center',
                        isReadOnly: true
                    },
                    { binding: 'descripcion', header: 'Puesto', width: 150, align: 'center' },
                    { binding: 'telefono', header: 'Telefono', width: 180, align: 'center' },
                    { binding: 'correo', header: 'Correo', width: 200, align: 'center' },
                    { header: '', isReadOnly: true, width: 80, align: 'center' }
                ],
                isReadOnly: true,
                itemFormatter: function (panel, r, c, cell) {
                    if (panel.cellType === wijmo.grid.CellType.Cell) {
                        const rowData = panel.rows[r].dataItem; // Obtiene los datos de la fila.
                        const flgActivo = rowData.flgActivo; // Verificar el valor de FlgActivo.

                        // Combinar nombre, apellido paterno y apellido materno en la columna "Nombre Completo"
                        if (panel.columns[c].binding === 'nombreCompleto') {
                            const nombreCompleto = `${rowData.nombreUsuario} ${rowData.apellidoPaternoUsuario} ${rowData.apellidoMaternoUsuario}`;
                            cell.textContent = nombreCompleto;
                        }

                        // Enlace para teléfono
                        if (panel.columns[c].binding === 'telefono' && rowData.telefono) {
                            cell.innerHTML = `<a href="tel:${rowData.telefono}" class="enlace-telefono" style="text-decoration: none; color: inherit;">${rowData.telefono}</a>`;
                        }

                        // Enlace para correo
                        if (panel.columns[c].binding === 'correo' && rowData.correo) {
                            cell.innerHTML = `<a href="mailto:${rowData.correo}" class="enlace-correo" style="text-decoration: none; color: inherit;">${rowData.correo}</a>`;
                        }

                        // Cambiar el color de fondo de la fila si flgActivo es false
                        // if (flgActivo === false) {
                        //     cell.style.backgroundColor = '#BE3144'; // Color rojo
                        //     cell.style.color = '#FFFFFF'; // Texto blanco para mejor contraste
                        // }

                        if (c === 0) {
                            cell.textContent = (r + 1).toString(); // Muestra el número de fila.
                        } else if (c === panel.columns.length - 1) {
                            // Crear los botones según el valor de FlgActivo
                            let botones = '';
                            if (flgActivo === true) {
                                botones = `
                        <div class="d-flex justify-content-center align-items-center gap-2">
                            <button style="height: 25px; width: 25px;" class="btn btn-phoenix-secondary btn-icon fs--2 text-900 abrirModalEditarUsuario" onclick="EditarUsuario(${rowData.id})">
                                <i class="fas fa-edit"></i>
                            </button>
                                    <button style="height: 25px; width: 25px;" class="btn btn-phoenix-secondary btn-icon fs--2 text-danger abrirModalEliminarUsuario" data-id="${rowData.id}" data-nombre="${rowData.usuario}">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>`;
                            } else if (flgActivo === false) {
                                botones = `
                        <div class="d-flex justify-content-center align-items-center gap-2">
                                    <button style="height: 25px; width: 25px;" class="btn btn-phoenix-secondary btn-icon fs--2 text-success abrirModalConfirmarUsuario" data-id="${rowData.id}" data-nombre="${rowData.usuario}">
                                <i class="fas fa-check"></i>
                            </button>
                        </div>`;
                            }

                            // Insertar los botones en la celda
                            cell.innerHTML = botones;
                        }
                    }
                }
            });

            verUsuarios();

            //============================================================================================================================\\
            //==========================================  Funcionalidad de Búsqueda y Autocompletar   =====================================\\
            //==============================================================================================================================\\
            $('#inputBusqueda').autocomplete({
                source: function (request, response) {
                    const term = request.term.toLowerCase(); // Obtiene el término de búsqueda.
                    const usuarios = gridUsuarios.itemsSource; // Obtiene la lista de usuarios.
                    const resultados = usuarios.filter(usuario =>
                        usuario.usuario.toLowerCase().includes(term) || // Busca por razón social.
                        usuario.nombreUsuario.toLowerCase().includes(term) || // Busca por RFC.
                        usuario.apellidoPaternoUsuario.toLowerCase().includes(term) || // Busca por prefijo.
                        usuario.apellidoMaternoUsuario.toLowerCase().includes(term) ||
                        usuario.descripcion.toLowerCase().includes(term) ||
                        usuario.telefono.toLowerCase().includes(term) ||// Busca por teléfono.
                        usuario.correo.toLowerCase().includes(term) 
                    );
                    response(resultados.map(usuario => ({
                        label: `${usuario.usuario} (${usuario.correo})`, // Muestra la razón social y RFC.
                        value: usuario.usuario // Asigna el ID del usuario como valor.
                    })));
                },
                select: function (event, ui) {
                    const usuarioId = ui.item.value; // Obtiene el ID del usuario seleccionado.
                    const usuario = gridUsuarios.itemsSource.find(u => u.id === usuarioId); // Busca el usuario en la grilla.
                    if (usuario) {
                        gridUsuarios.itemsSource = [usuario]; // Filtra la grilla para mostrar solo el usuario seleccionado.
                    }
                }
            });

            // Evento para buscar al hacer clic en el botón de búsqueda.
            $('#btnBuscar').on('click', function () {
                const term = $('#inputBusqueda').val().toLowerCase(); // Obtiene el término de búsqueda.
                const usuarios = gridUsuarios.itemsSource; // Obtiene la lista de usuarios.
                const resultados = usuarios.filter(usuario =>
                    usuario.usuario.toLowerCase().includes(term) || // Busca por razón social.
                    usuario.nombreUsuario.toLowerCase().includes(term) || // Busca por RFC.
                    usuario.apellidoPaternoUsuario.toLowerCase().includes(term) || // Busca por prefijo.
                    usuario.apellidoMaternoUsuario.toLowerCase().includes(term) ||
                    usuario.descripcion.toLowerCase().includes(term) ||
                    usuario.telefono.toLowerCase().includes(term) ||// Busca por teléfono.
                    usuario.correo.toLowerCase().includes(term)
                );

                if (resultados.length > 0) {
                    GridEstatusProyectos.itemsSource = resultados; // Filtra la grilla para mostrar los resultados.
                    $('#mensajeNoEncontrado').hide(); // Oculta el mensaje de "Puesto no encontrado".
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'No se encontró ningún resultado',
                    });
                }
            });

            // Evento para limpiar la búsqueda y mostrar todos los usuarios.
            $('#inputBusqueda').on('input', function () {
                if ($(this).val() === '') {
                    verUsuarios(); // Recarga todos los usuarios.
                    $('#mensajeNoEncontrado').hide(); // Oculta el mensaje de "Usuario no encontrado".
                }
            });

            //============================================================================================================================\\
            //==========================================      Funcionalidad del botón Recargar       ======================================\\
            //==============================================================================================================================\\

            $('#btnReloadUsuarios').on('click', function () {
                // Ocultar el grid de usuarios
                document.getElementById('GridUsuarios').style.visibility = 'hidden';

                // Bloquear el contenido principal con el estilo "arrows"
                Notiflix.Block.arrows('.card', 'Actualizando datos...', {
                    backgroundColor: 'rgba(255, 255, 255, 0.8)', // Fondo semitransparente
                    svgSize: '50px', // Tamaño del ícono de flechas
                    messageFontSize: '16px', // Tamaño del mensaje
                });

                // Llamar a la función verUsuarios para recargar el grid
                verUsuarios().then((serverResponseTime) => {
                    // Tiempo adicional de 500 ms después de la respuesta del servidor
                    setTimeout(() => {
                        // Desbloquear el contenido principal
                        Notiflix.Block.remove('.card');

                        // Mostrar el grid después de que termine la animación de éxito
                        document.getElementById('GridUsuarios').style.visibility = 'visible';
                    }, serverResponseTime + 500); // Tiempo del servidor + 500 ms
                }).catch(() => {
                    // En caso de error, desbloquear el contenido principal
                    Notiflix.Block.remove('.card');

                    // Mostrar un mensaje de error con SweetAlert2 (puedes cambiarlo por Notiflix si prefieres)
                    Swal.fire({
                        title: 'Error',
                        text: 'Hubo un error al recargar los usuarios.',
                        icon: 'error',
                        timer: 2000,
                        timerProgressBar: true,
                        showConfirmButton: false,
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        allowEnterKey: false
                    });

                    // Mostrar el grid incluso si hay un error
                    document.getElementById('GridUsuarios').style.visibility = 'visible';
                });
            });

            //============================================================================================================================\\
            //========================================== Funcionalidad del boton de Agregar Cliente  ======================================\\
            //==============================================================================================================================\\
            llenarComboUsuarios();

            $('#UserModal').on('shown.bs.modal', function () {
                llenarComboUsuarios();
            });

            $("#InpTelefono").on("input", function () {
                $(this).val($(this).val().replace(/[^0-9+ ]/g, ""));
            });

            // Validación del formulario
            $("#FormCrearUsuario").validate({
                rules: {
                    InpUsuario: { required: true, minlength: 2 },
                    InpNombreUsuario: { required: true, minlength: 2 },
                    InpApellidoPaternoUsuario: { required: true, minlength: 2 },
                    InpApellidoMaternoUsuario: { required: true, minlength: 2 },
                    InpTelefono: { required: true, maxlength: 15 },
                    InpCorreo: { required: true, email: true }, // Validar que sea un correo válido
                    InpContrasena: { required: true, minlength: 8 }, // Mínimo 8 caracteres
                    InpRepetirContrasena: { required: true, minlength: 8, equalTo: "#InpContrasena" }, // Mínimo 8 caracteres y debe ser igual a InpContrasena
                    InpImagenExt: { required: true }
                },
                messages: {
                    InpUsuario: { required: "La usuario es requerido.", minlength: "Mínimo 2 caracteres." },
                    InpNombreUsuario: { required: "El nombre es requerido.", minlength: "Mínimo 2 caracteres." },
                    InpApellidoPaternoUsuario: { required: "El apellido paterno es requerido.", minlength: "Mínimo 2 caracteres." },
                    InpApellidoMaternoUsuario: { required: "El apellido materno es requerido.", minlength: "Mínimo 2 caracteres." },
                    InpTelefono: { required: "El Teléfono es requerido.", maxlength: "El teléfono no puede tener más de 15 caracteres." },
                    InpCorreo: { required: "El correo es requerido.", email: "Por favor, introduce un correo válido." }, // Mensaje para correo inválido
                    InpContrasena: { required: "La contraseña es requerida.", minlength: "La contraseña debe tener al menos 8 caracteres." }, // Mensaje para contraseña corta
                    InpRepetirContrasena: { required: "Por favor repite correctamente la contraseña.", minlength: "La contraseña debe tener al menos 8 caracteres.", equalTo: "Las contraseñas no coinciden." }, // Mensaje para contraseñas no coincidentes
                    InpImagenExt: { required: "La fotografia es requerida."}
                },
                submitHandler: function (form, event) {
                    event.preventDefault();
                    agregarUsuario(); // Llamar a la función sin pasar IdUsuario
                },
                errorPlacement: function (error, element) {
                    error.addClass('col-12 mt-2 bg-danger text-white text-center p-2 rounded');
                    error.insertAfter(element);
                },
                errorElement: 'div',
                errorClass: 'alert-validate'
            });

            // Evento para previsualizar una imagen seleccionada
            $('#InpImagenExt').on('change', function (event) {
                const file = event.target.files[0]; // Obtiene el archivo seleccionado.
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        $('#previewImage').attr('src', e.target.result); // Muestra la imagen.
                        $('#fileName').text(file.name); // Muestra el nombre del archivo.
                        $('#fileSize').text((file.size / 1024).toFixed(2) + ' KB'); // Muestra el tamaño del archivo.
                        $('#previewContainer').removeClass('d-none'); // Muestra el contenedor de previsualización.
                    };
                    reader.readAsDataURL(file); // Lee el archivo como URL.
                }
            });

            // Evento para eliminar la previsualización de la imagen
            $('#removePreview').on('click', function () {
                $('#previewImage').attr('src', ''); // Limpia la imagen.
                $('#fileName').text(''); // Limpia el nombre del archivo.
                $('#fileSize').text(''); // Limpia el tamaño del archivo.
                $('#previewContainer').addClass('d-none'); // Oculta el contenedor de previsualización.
                $('#InpImagenExt').val(''); // Limpia el input de archivo.
            });

            // Evento para limpiar el formulario al cerrar el modal
            $('#UserModal').on('hidden.bs.modal', function () {
                $('#FormCrearUsuario')[0].reset(); // Restablece el formulario.
                $('#FormCrearUsuario').validate().resetForm();
                $('#previewImage').attr('src', ''); // Limpia la imagen.
                $('#fileName').text(''); // Limpia el nombre del archivo.
                $('#fileSize').text(''); // Limpia el tamaño del archivo.
                $('#previewContainer').addClass('d-none'); // Oculta el contenedor de previsualización.
            });

            // Función para enviar los datos del formulario mediante AJAX
            function agregarUsuario() {
                
                var formData = new FormData();
                formData.append('Usuario', $('#InpUsuario').val()); // Enviar el IdCliente
                formData.append('NombreUsuario', $('#InpNombreUsuario').val());
                formData.append('ApellidoPaternoUsuario', $('#InpApellidoPaternoUsuario').val());
                formData.append('ApellidoMaternoUsuario', $('#InpApellidoMaternoUsuario').val());
                formData.append('IdPuesto', $('#InpPuesto').val()); // Enviar el IdCliente
                formData.append('Telefono', $('#InpTelefono').val());
                formData.append('Correo', $('#InpCorreo').val());
                formData.append('Contrasena', $('#InpContrasena').val());
                formData.append('FotoFile', $('#InpImagenExt')[0].files[0]); // Cambiado a LogotipoFile para coincidir con el backend
                // let dataSend = {
                //     usuario: {
                //         Usuario
                //     }
                // }
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("AgregarUsuario", "Catalogos")',
                    data: formData,
                    processData: false,
                    contentType: false,
                    beforeSend: function () {
                        // Ocultar el grid de usuarios
                        document.getElementById('GridUsuarios').style.visibility = 'hidden';

                        // Bloquear el contenido principal con el estilo "hourglass"
                        Notiflix.Block.circle('.card', 'Agregando usuario...', {
                            backgroundColor: 'rgba(255, 255, 255, 0.8)', // Fondo semitransparente
                            svgSize: '50px', // Tamaño del ícono de reloj de arena
                            messageFontSize: '16px', // Tamaño del mensaje
                        });
                    },
                    success: function (response) {
                        if (response.resultado) {
                            // Llamar a la función verUsuarios para recargar el grid
                            verUsuarios().then((serverResponseTime) => {
                                // Tiempo adicional de 500 ms después de la respuesta del servidor
                                setTimeout(() => {
                                    // Desbloquear el contenido principal
                                    Notiflix.Block.remove('.card');

                                    // Mostrar el grid después de que termine la animación de éxito
                                    document.getElementById('GridUsuarios').style.visibility = 'visible';
                                }, serverResponseTime + 500); // Tiempo del servidor + 500 ms
                            }).catch(() => {
                                // En caso de error, desbloquear el contenido principal
                                Notiflix.Block.remove('.card');

                                // Mostrar un mensaje de error con SweetAlert2
                                Swal.fire({
                                    title: 'Error',
                                    text: 'Hubo un error al recargar los usuarios.',
                                    icon: 'error',
                                    timer: 2000,
                                    timerProgressBar: true,
                                    showConfirmButton: false,
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    allowEnterKey: false
                                });

                                // Mostrar el grid incluso si hay un error
                                document.getElementById('GridUsuarios').style.visibility = 'visible';
                            });
                        } else {
                            // Desbloquear el contenido principal si hay un error en la respuesta
                            Notiflix.Block.remove('.card');

                            // Mostrar un mensaje de error con SweetAlert2
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: response.mensaje
                            });
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // Desbloquear el contenido principal en caso de error en la solicitud
                        Notiflix.Block.remove('.card');

                        // Mostrar un mensaje de error con SweetAlert2
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "Ocurrió un error al agregar el usuario."
                        });

                        console.error("Error en la solicitud:", textStatus, errorThrown);
                    },
                    complete: function () {
                        // Desbloquear el contenido principal después de 500 ms adicionales
                        setTimeout(() => {
                            Notiflix.Block.remove('.card');
                        }, 500);
                    }
                });

                const UserModal = bootstrap.Modal.getInstance(document.getElementById('UserModal'));
                UserModal.hide();
            }

            //============================================================================================================================\\
            //==========================================   Funcionalidad del botón Editar Cliente    ======================================\\
            //==============================================================================================================================\\

            $('#ModalEditarUsuario').on('shown.bs.modal', function () {
                llenarComboUsuarios();
            });

            $('.cerrarModalEditarUsuario').on('click', function () {
                const modalEditarUsuario = bootstrap.Modal.getInstance(document.getElementById('ModalEditarUsuario'));
                modalEditarUsuario.hide();
            });

            $("#InpTelefonoEdit").on("input", function () {
                $(this).val($(this).val().replace(/[^0-9+ ]/g, ""));
            });

            // Validación del formulario
            $("#FormEditarUsuario").validate({
                rules: {
                    InpUsuarioEdit: { required: true, minlength: 2 },
                    InpNombreUsuarioEdit: { required: true, minlength: 2 },
                    InpApellidoPaternoUsuarioEdit: { required: true, minlength: 2 },
                    InpApellidoMaternoUsuarioEdit: { required: true, minlength: 2 },
                    InpTelefonoEdit: { required: true, maxlength: 15 },
                    InpCorreoEdit: { required: true, email: true }, // Validar que sea un correo válido
                    InpContrasenaEdit: { required: true, minlength: 8 }, // Mínimo 8 caracteres
                },
                messages: {
                    InpUsuarioEdit: { required: "La usuario es requerido.", minlength: "Mínimo 2 caracteres." },
                    InpNombreUsuarioEdit: { required: "El nombre es requerido.", minlength: "Mínimo 2 caracteres." },
                    InpApellidoPaternoUsuarioEdit: { required: "El apellido paterno es requerido.", minlength: "Mínimo 2 caracteres." },
                    InpApellidoMaternoUsuarioEdit: { required: "El apellido materno es requerido.", minlength: "Mínimo 2 caracteres." },
                    InpTelefonoEdit: { required: "El Teléfono es requerido.", maxlength: "El teléfono no puede tener más de 15 caracteres." },
                    InpCorreoEdit: { required: "El correo es requerido.", email: "Por favor, introduce un correo válido." }, // Mensaje para correo inválido
                    InpContrasenaEdit: { required: "La contraseña es requerida.", minlength: "La contraseña debe tener al menos 8 caracteres." }, // Mensaje para contraseña corta
                },
                submitHandler: function (form, event) {
                    event.preventDefault();
                    agregarUsuario(); // Llamar a la función sin pasar IdUsuario
                },
                errorPlacement: function (error, element) {
                    error.addClass('col-12 mt-2 bg-danger text-white text-center p-2 rounded');
                    error.insertAfter(element);
                },
                errorElement: 'div',
                errorClass: 'alert-validate'
            });

            // Selecciona todos los campos del formulario de edición
            const camposEdicion = ['#InpRazonSocialEdit', '#InpRFCEdit', '#InpPrefijoEdit', '#InpTelefonoEdit', '#InpUsuarioImagenEdit'];

            // Función para habilitar el botón si algún campo ha cambiado
            function habilitarBotonActualizar() {
                let algunCampoCambiado = false;

                camposEdicion.forEach(function (campo) {
                    if ($(campo).val() !== '') {
                        algunCampoCambiado = true;
                    }
                });

                // Habilita el botón si algún campo ha cambiado
                if (algunCampoCambiado) {
                    $('#btnActualizarUsuario').prop('disabled', false);
                } else {
                    $('#btnActualizarUsuario').prop('disabled', true);
                }
            }

            // Escucha los cambios en los campos del formulario
            camposEdicion.forEach(function (campo) {
                $(campo).on('input change', function () {
                    habilitarBotonActualizar();
                });
            });

            // Escucha el evento de cambio en el input de la imagen
            $('#InpUsuarioImagenEdit').on('change', function (event) {
                const file = event.target.files[0]; // Obtiene el archivo seleccionado.
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        $('#previewImageEdit').attr('src', e.target.result); // Muestra la imagen.
                        $('#fileNameEdit').text(file.name); // Muestra el nombre del archivo.
                        $('#fileSizeEdit').text((file.size / 1024).toFixed(2) + ' KB'); // Muestra el tamaño del archivo.
                        $('#previewContainerEdit').removeClass('d-none'); // Muestra el contenedor de previsualización.
                    };
                    reader.readAsDataURL(file); // Lee el archivo como URL.
                }
                habilitarBotonActualizar();
            });

            $('#btnActualizarUsuario').on('click', function () {
                const id = $(this).data('id'); // Obtiene el ID del usuario.
                const usuario = $('#InpUsuarioEdit').val(); // Obtiene la razón social.
                const nombreUsuario = $('#InpNombreUsuarioEdit').val(); // Obtiene el RFC.
                const apellidoPaternoUsuario = $('#InpApellidoPaternoUsuarioEdit').val(); // Obtiene el prefijo.
                const apellidoMaternoUsuario = $('#InpApellidoMaternoUsuarioEdit').val(); // Obtiene el prefijo.
                const telefono = $('#InpTelefonoEdit').val(); // Obtiene el teléfono.
                const correo = $('#InpCorreoEdit').val();
                const imagen = $('#InpUsuarioImagenEdit')[0].files[0]; // Obtiene la imagen seleccionada.
                const imagenExistente = $('#previewImageEdit').attr('src'); // Obtiene la imagen existente en base64.

                const formData = new FormData();
                formData.append('Id', id);
                formData.append('Usuario', usuario);
                formData.append('NombreUsuario', nombreUsuario);
                formData.append('ApellidoPaternoUsuario', apellidoPaternoUsuario);
                formData.append('ApellidoMaternoUsuario', apellidoMaternoUsuario);
                formData.append('IdPuesto', $('#InpPuestoEdit').val()); // Enviar el IdCliente
                formData.append('Telefono', telefono);
                formData.append('Correo', correo);
                formData.append('Contrasena', $('#InpContrasenaEdit').val());


                // Si no se selecciona una nueva imagen, envía la imagen existente en base64.
                if (!imagen && imagenExistente) {
                    formData.append('FotoBase64', imagenExistente); // Envía la imagen existente en base64.
                } else if (imagen) {
                    formData.append('FotoFile', imagen); // Envía la nueva imagen seleccionada.
                }

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("EditarUsuario", "Catalogos")', // Asegúrate de que esta ruta sea correcta.
                    data: formData,
                    processData: false,
                    contentType: false,
                    beforeSend: function () {
                        // Ocultar el grid de usuarios
                        document.getElementById('GridUsuarios').style.visibility = 'hidden';

                        // Bloquear el contenido principal con el estilo "hourglass"
                        Notiflix.Block.hourglass('.card', 'Actualizando datos...', {
                            backgroundColor: 'rgba(255, 255, 255, 0.8)', // Fondo semitransparente
                            svgSize: '50px', // Tamaño del ícono de reloj de arena
                            messageFontSize: '16px', // Tamaño del mensaje
                        });
                    },
                    success: function (response) {
                        if (response.resultado) {
                            // Llamar a la función verUsuarios para recargar el grid
                            verUsuarios().then((serverResponseTime) => {
                                // Tiempo adicional de 500 ms después de la respuesta del servidor
                                setTimeout(() => {
                                    // Desbloquear el contenido principal
                                    Notiflix.Block.remove('.card');

                                    // Mostrar el grid después de que termine la animación de éxito
                                    document.getElementById('GridUsuarios').style.visibility = 'visible';
                                }, serverResponseTime + 500); // Tiempo del servidor + 500 ms
                            }).catch(() => {
                                // En caso de error, desbloquear el contenido principal
                                Notiflix.Block.remove('.card');

                                // Mostrar un mensaje de error con SweetAlert2
                                Swal.fire({
                                    title: 'Error',
                                    text: 'Hubo un error al recargar los usuarios.',
                                    icon: 'error',
                                    timer: 2000,
                                    timerProgressBar: true,
                                    showConfirmButton: false,
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    allowEnterKey: false
                                });

                                // Mostrar el grid incluso si hay un error
                                document.getElementById('GridUsuarios').style.visibility = 'visible';
                            });
                        } else {
                            // Desbloquear el contenido principal si hay un error en la respuesta
                            Notiflix.Block.remove('.card');

                            // Mostrar un mensaje de error con SweetAlert2
                            Swal.fire({ icon: "error", title: "Error", text: response.mensaje });
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // Desbloquear el contenido principal en caso de error en la solicitud
                        Notiflix.Block.remove('.card');

                        // Mostrar un mensaje de error con SweetAlert2
                        Swal.fire({
                            title: 'Error',
                            text: 'Hubo un error en la solicitud al servidor.',
                            icon: 'error',
                            timer: 2000,
                            timerProgressBar: true,
                            showConfirmButton: false,
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            allowEnterKey: false
                        });

                        console.error("Error en la solicitud:", textStatus, errorThrown);
                    },
                    complete: function () {
                        // Desbloquear el contenido principal después de 500 ms adicionales
                        setTimeout(() => {
                            Notiflix.Block.remove('.card');
                        }, 500);
                    }
                });

                const modalEditarUsuario = bootstrap.Modal.getInstance(document.getElementById('ModalEditarUsuario'));
                modalEditarUsuario.hide(); // Cierra el modal.
            });

            $('#InpUsuarioImagenEdit').on('change', function (event) {
                const file = event.target.files[0]; // Obtiene el archivo seleccionado.
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        $('#previewImageEdit').attr('src', e.target.result); // Muestra la imagen.
                        $('#fileNameEdit').text(file.name); // Muestra el nombre del archivo.
                        $('#fileSizeEdit').text((file.size / 1024).toFixed(2) + ' KB'); // Muestra el tamaño del archivo.
                        $('#previewContainerEdit').removeClass('d-none'); // Muestra el contenedor de previsualización.
                    };
                    reader.readAsDataURL(file); // Lee el archivo como URL.
                }
            });

            // Evento para limpiar el formulario al cerrar el modal
            $('#ModalEditarUsuario').on('hidden.bs.modal', function () {
                $('#FormEditarUsuario')[0].reset(); // Restablece el formulario.
                $('#FormEditarUsuario').validate().resetForm();
                $('#previewImageEdit').attr('src', ''); // Limpia la imagen.
                $('#fileNameEdit').text(''); // Limpia el nombre del archivo.
                $('#fileSizeEdit').text(''); // Limpia el tamaño del archivo.
            });

            //============================================================================================================================\\
            //==========================================   Funcionalidad del botón Eliminar Cliente  ======================================\\
            //==============================================================================================================================\\
            // Función para abrir el modal de eliminación de usuario.
            function EliminarUsuario(id, usuario) {
                $(".nombreUsuario").text(usuario); // Muestra el nombre del usuario en el modal.
                $("#BtnEliminarUsuario").data("id", id); // Asigna el ID al botón de eliminar.
                const modalEliminar = new bootstrap.Modal(document.getElementById("ModalEliminarUsuario"));
                modalEliminar.show(); // Muestra el modal.
            }

            // Evento para abrir el modal de eliminación.
            $(document).on("click", ".abrirModalEliminarUsuario", function () {
                let id = $(this).data("id"); // Extrae el ID del usuario usando un atributo data-*.
                let usuario = $(this).data("nombre"); // Obtiene la razón social.
                EliminarUsuario(id, usuario); // Llama a la función para abrir el modal.
            });

            // Evento para cerrar el modal de eliminación.
            $(".cerrarModalEliminarUsuario").on("click", function () {
                const modalEliminar = bootstrap.Modal.getInstance(document.getElementById("ModalEliminarUsuario"));
                modalEliminar.hide(); // Cierra el modal.
            });

            // Evento para manejar la eliminación del usuario.
            $("#FormEliminarUsuario").on("submit", function (e) {
                e.preventDefault(); // Prevenir el envío del formulario por defecto.

                const id = $("#BtnEliminarUsuario").data("id"); // Obtiene el ID del usuario.
                console.log("Eliminando usuario con ID:", id); // Registra el ID en consola.

                const formData = new FormData();
                formData.append('Id', id);

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("DesactivarUsuario", "Catalogos")', // Asegúrate de que la ruta sea correcta.
                    data: formData,
                    contentType: false, // Importante para FormData
                    processData: false, // Importante para FormData
                    beforeSend: function () {
                        // Ocultar el grid de usuarios
                        document.getElementById('GridUsuarios').style.visibility = 'hidden';

                        // Bloquear el contenido principal con el estilo "hourglass"
                        Notiflix.Block.hourglass('.card', 'Actualizando datos...', {
                            backgroundColor: 'rgba(255, 255, 255, 0.8)', // Fondo semitransparente
                            svgSize: '50px', // Tamaño del ícono de reloj de arena
                            messageFontSize: '16px', // Tamaño del mensaje
                        });
                    },
                    success: function (response) {
                        if (response.resultado) {
                            // Llamar a la función verUsuarios para recargar el grid
                            verUsuarios().then((serverResponseTime) => {
                                // Tiempo adicional de 500 ms después de la respuesta del servidor
                                setTimeout(() => {
                                    // Desbloquear el contenido principal
                                    Notiflix.Block.remove('.card');

                                    // Mostrar el grid después de que termine la animación de éxito
                                    document.getElementById('GridUsuarios').style.visibility = 'visible';
                                }, serverResponseTime + 500); // Tiempo del servidor + 500 ms
                            }).catch(() => {
                                // En caso de error, desbloquear el contenido principal
                                Notiflix.Block.remove('.card');

                                // Mostrar un mensaje de error con SweetAlert2
                                Swal.fire({
                                    title: 'Error',
                                    text: 'Hubo un error al recargar los usuarios.',
                                    icon: 'error',
                                    timer: 2000,
                                    timerProgressBar: true,
                                    showConfirmButton: false,
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    allowEnterKey: false
                                });

                                // Mostrar el grid incluso si hay un error
                                document.getElementById('GridUsuarios').style.visibility = 'visible';
                            });
                        } else {
                            // Desbloquear el contenido principal si hay un error en la respuesta
                            Notiflix.Block.remove('.card');

                            // Mostrar un mensaje de error con SweetAlert2
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: response.mensaje
                            });
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // Desbloquear el contenido principal en caso de error en la solicitud
                        Notiflix.Block.remove('.card');

                        // Mostrar un mensaje de error con SweetAlert2
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "Ocurrió un error al desactivar el usuario."
                        });

                        console.error("Error en la solicitud:", textStatus, errorThrown);
                    },
                    complete: function () {
                        // Desbloquear el contenido principal después de 500 ms adicionales
                        setTimeout(() => {
                            Notiflix.Block.remove('.card');
                        }, 500);
                    }
                });

                // Cierra el modal después de iniciar la solicitud AJAX
                const modalEliminar = bootstrap.Modal.getInstance(document.getElementById('ModalEliminarUsuario'));
                modalEliminar.hide();
            });

            //============================================================================================================================\\
            //==========================================  Funcionalidad del botón Reactivar Cliente  ======================================\\
            //==============================================================================================================================\\
            // Función para abrir el modal de confirmación de reactivación de usuario.
            function ConfirmarUsuario(id, usuario) {
                $(".nombreConfirmarUsuario").text(usuario); // Muestra la razón social del usuario en el modal.
                $("#BtnConfirmarUsuario").data("id", id); // Asigna el ID del usuario al botón de confirmación.
                const modalConfirmar = new bootstrap.Modal(document.getElementById("ModalConfirmarUsuario"));
                modalConfirmar.show(); // Muestra el modal de confirmación.
            }

            // Evento para abrir el modal de confirmación al hacer clic en un botón específico.
            $(document).on("click", ".abrirModalConfirmarUsuario", function () {
                let id = $(this).data("id"); // Obtiene el ID del usuario desde el atributo data-id.
                let usuario = $(this).data("nombre"); // Obtiene la razón social del usuario desde el atributo data-nombre.
                ConfirmarUsuario(id, usuario); // Llama a la función para abrir el modal de confirmación.
            });

            // Evento para cerrar el modal de confirmación al hacer clic en un botón de cierre.
            $(".cerrarModalConfirmarUsuario").on("click", function () {
                const modalConfirmar = bootstrap.Modal.getInstance(document.getElementById("ModalConfirmarUsuario"));
                modalConfirmar.hide(); // Cierra el modal de confirmación.
            });

            // Evento para manejar el envío del formulario de confirmación de reactivación de usuario.
            $("#FormConfirmarUsuario").on("submit", function (e) {
                e.preventDefault(); // Evita el envío tradicional del formulario.

                const id = $("#BtnConfirmarUsuario").data("id"); // Obtiene el ID del usuario desde el botón de confirmación.
                console.log("Reactivando usuario con ID:", id); // Muestra el ID del usuario en la consola para depuración.

                const formData = new FormData();
                formData.append('Id', id); // Agrega el ID del usuario al FormData.

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("ReactivarUsuario", "Catalogos")', // URL de la acción que reactiva al usuario.
                    data: formData,
                    contentType: false, // Importante para FormData.
                    processData: false, // Importante para FormData.
                    beforeSend: function () {
                        // Ocultar el grid de usuarios
                        document.getElementById('GridUsuarios').style.visibility = 'hidden';

                        // Bloquear el contenido principal con el estilo "hourglass"
                        Notiflix.Block.hourglass('.card', 'Actualizando datos...', {
                            backgroundColor: 'rgba(255, 255, 255, 0.8)', // Fondo semitransparente
                            svgSize: '50px', // Tamaño del ícono de reloj de arena
                            messageFontSize: '16px', // Tamaño del mensaje
                        });
                    },
                    success: function (response) {
                        if (response.resultado) {
                            // Llamar a la función verUsuarios para recargar el grid
                            verUsuarios().then((serverResponseTime) => {
                                // Tiempo adicional de 500 ms después de la respuesta del servidor
                                setTimeout(() => {
                                    // Desbloquear el contenido principal
                                    Notiflix.Block.remove('.card');

                                    // Mostrar el grid después de que termine la animación de éxito
                                    document.getElementById('GridUsuarios').style.visibility = 'visible';
                                }, serverResponseTime + 500); // Tiempo del servidor + 500 ms
                            }).catch(() => {
                                // En caso de error, desbloquear el contenido principal
                                Notiflix.Block.remove('.card');

                                // Mostrar un mensaje de error con SweetAlert2
                                Swal.fire({
                                    title: 'Error',
                                    text: 'Hubo un error al recargar los usuarios.',
                                    icon: 'error',
                                    timer: 2000,
                                    timerProgressBar: true,
                                    showConfirmButton: false,
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    allowEnterKey: false
                                });

                                // Mostrar el grid incluso si hay un error
                                document.getElementById('GridUsuarios').style.visibility = 'visible';
                            });
                        } else {
                            // Desbloquear el contenido principal si hay un error en la respuesta
                            Notiflix.Block.remove('.card');

                            // Mostrar un mensaje de error con SweetAlert2
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: response.mensaje
                            });
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // Desbloquear el contenido principal en caso de error en la solicitud
                        Notiflix.Block.remove('.card');

                        // Mostrar un mensaje de error con SweetAlert2
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "Ocurrió un error al reactivar el usuario."
                        });

                        console.error("Error en la solicitud:", textStatus, errorThrown);
                    },
                    complete: function () {
                        // Desbloquear el contenido principal después de 500 ms adicionales
                        setTimeout(() => {
                            Notiflix.Block.remove('.card');
                        }, 500);
                    }
                });

                // Cierra el modal de confirmación después de iniciar la solicitud AJAX.
                const modalConfirmar = bootstrap.Modal.getInstance(document.getElementById('ModalConfirmarUsuario'));
                modalConfirmar.hide();
            });

        });

    </script>
}
